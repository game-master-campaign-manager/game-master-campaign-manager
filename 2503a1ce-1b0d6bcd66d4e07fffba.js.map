{"version":3,"file":"2503a1ce-1b0d6bcd66d4e07fffba.js","mappings":"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","sources":["webpack://theme-test/./node_modules/@dice-roller/rpg-dice-roller/lib/esm/bundle.js"],"sourcesContent":["import _slicedToArray from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _set from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/set.js\";\nimport _toConsumableArray from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _get from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _createClass from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _possibleConstructorReturn from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _getPrototypeOf from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _wrapNativeSuper from \"/Users/g/Sites/gmcm-example-site/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @dice-roller/rpg-dice-roller - An advanced JS based dice roller that can roll various types of dice and modifiers, along with mathematical equations.\n * \n * @version 5.1.0\n * @license MIT\n * @author GreenImp Media <info@greenimp.co.uk> (http://greenimp.co.uk)\n * @link https://dice-roller.github.io/documentation\n */\nimport { evaluate as evaluate$1 } from 'mathjs';\n/**\n * An error thrown when a comparison operator is invalid\n */\n\nvar CompareOperatorError = /*#__PURE__*/function (_TypeError) {\n  _inherits(CompareOperatorError, _TypeError);\n\n  var _super = _createSuper(CompareOperatorError);\n\n  /**\n   * Create a `CompareOperatorError`\n   *\n   * @param {*} operator The invalid operator\n   */\n  function CompareOperatorError(operator) {\n    var _this;\n\n    _classCallCheck(this, CompareOperatorError);\n\n    _this = _super.call(this, \"Operator \\\"\".concat(operator, \"\\\" is invalid\")); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (TypeError.captureStackTrace) {\n      TypeError.captureStackTrace(_assertThisInitialized(_this), CompareOperatorError);\n    }\n\n    _this.name = 'CompareOperatorError';\n    _this.operator = operator;\n    return _this;\n  }\n\n  return _createClass(CompareOperatorError);\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\n/**\n * An error thrown when a data format is invalid\n */\n\n\nvar DataFormatError = /*#__PURE__*/function (_Error) {\n  _inherits(DataFormatError, _Error);\n\n  var _super2 = _createSuper(DataFormatError);\n\n  /**\n   * Create a `DataFormatError`\n   *\n   * @param {*} data The invalid data\n   */\n  function DataFormatError(data) {\n    var _this2;\n\n    _classCallCheck(this, DataFormatError);\n\n    _this2 = _super2.call(this, \"Invalid data format: \".concat(data)); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this2), DataFormatError);\n    }\n\n    _this2.name = 'ImportError';\n    _this2.data = data;\n    return _this2;\n  }\n\n  return _createClass(DataFormatError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * An error thrown when an invalid die action (e.g Exploding on a d1) occurs\n */\n\n\nvar DieActionValueError = /*#__PURE__*/function (_Error2) {\n  _inherits(DieActionValueError, _Error2);\n\n  var _super3 = _createSuper(DieActionValueError);\n\n  /**\n   * Create a `DieActionValueError`\n   *\n   * @param {StandardDice} die The die the action was on\n   * @param {string|null} [action=null] The invalid action\n   */\n  function DieActionValueError(die) {\n    var _this3;\n\n    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DieActionValueError);\n\n    _this3 = _super3.call(this, \"Die \\\"\".concat(die, \"\\\" must have more than 1 possible value to \").concat(action || 'do this action')); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this3), DieActionValueError);\n    }\n\n    _this3.name = 'DieActionValueError';\n    _this3.action = action;\n    _this3.die = die;\n    return _this3;\n  }\n\n  return _createClass(DieActionValueError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * An error thrown when the notation is invalid\n */\n\n\nvar NotationError = /*#__PURE__*/function (_Error3) {\n  _inherits(NotationError, _Error3);\n\n  var _super4 = _createSuper(NotationError);\n\n  /**\n   * Create a `NotationError`\n   *\n   * @param {*} notation The invalid notation\n   */\n  function NotationError(notation) {\n    var _this4;\n\n    _classCallCheck(this, NotationError);\n\n    _this4 = _super4.call(this, \"Notation \\\"\".concat(notation, \"\\\" is invalid\")); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this4), NotationError);\n    }\n\n    _this4.name = 'NotationError';\n    _this4.notation = notation;\n    return _this4;\n  }\n\n  return _createClass(NotationError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * An error thrown when a required argument is missing\n */\n\n\nvar RequiredArgumentError = /*#__PURE__*/function (_Error4) {\n  _inherits(RequiredArgumentError, _Error4);\n\n  var _super5 = _createSuper(RequiredArgumentError);\n\n  /**\n   * Create a `RequiredArgumentError`\n   *\n   * @param {string|null} [argumentName=null] The argument name\n   */\n  function RequiredArgumentError() {\n    var _this5;\n\n    var argumentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, RequiredArgumentError);\n\n    _this5 = _super5.call(this, \"Missing argument\".concat(argumentName ? \" \\\"\".concat(argumentName, \"\\\"\") : '')); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this5), RequiredArgumentError);\n    }\n\n    _this5.argumentName = argumentName;\n    return _this5;\n  }\n\n  return _createClass(RequiredArgumentError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar index$4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CompareOperatorError: CompareOperatorError,\n  DataFormatError: DataFormatError,\n  DieActionValueError: DieActionValueError,\n  NotationError: NotationError,\n  RequiredArgumentError: RequiredArgumentError\n});\n/**\n * Check if `a` is comparative to `b` with the given operator.\n *\n * @example <caption>Is `a` greater than `b`?</caption>\n * const a = 4;\n * const b = 2;\n *\n * compareNumber(a, b, '>'); // true\n *\n * @example <caption>Is `a` equal to `b`?</caption>\n * const a = 4;\n * const b = 2;\n *\n * compareNumber(a, b, '='); // false\n *\n * @param {number} a The number to compare with `b`\n * @param {number} b The number to compare with `a`\n * @param {string} operator A valid comparative operator: `=, <, >, <=, >=, !=, <>`\n *\n * @returns {boolean} `true` if the comparison matches, `false` otherwise\n */\n\nvar compareNumbers = function compareNumbers(a, b, operator) {\n  var aNum = Number(a);\n  var bNum = Number(b);\n  var result;\n\n  if (Number.isNaN(aNum) || Number.isNaN(bNum)) {\n    return false;\n  }\n\n  switch (operator) {\n    case '=':\n    case '==':\n      result = aNum === bNum;\n      break;\n\n    case '<':\n      result = aNum < bNum;\n      break;\n\n    case '>':\n      result = aNum > bNum;\n      break;\n\n    case '<=':\n      result = aNum <= bNum;\n      break;\n\n    case '>=':\n      result = aNum >= bNum;\n      break;\n\n    case '!':\n    case '!=':\n    case '<>':\n      result = aNum !== bNum;\n      break;\n\n    default:\n      result = false;\n      break;\n  }\n\n  return result;\n};\n/**\n * Evaluate mathematical strings.\n *\n * @example\n * evaluate('5+6'); // 11\n *\n * @param {string} equation The mathematical equation to compute.\n *\n * @returns {number} The result of the equation\n */\n\n\nvar evaluate = function evaluate(equation) {\n  return evaluate$1(equation);\n};\n/**\n * Check if the given value is a valid finite number.\n *\n * @param {*} val\n *\n * @returns {boolean} `true` if it is a finite number, `false` otherwise\n */\n\n\nvar isNumeric = function isNumeric(val) {\n  if (typeof val !== 'number' && typeof val !== 'string') {\n    return false;\n  }\n\n  return !Number.isNaN(val) && Number.isFinite(Number(val));\n};\n/**\n * Check if the given value is a \"safe\" number.\n *\n * A \"safe\" number falls within the `Number.MAX_SAFE_INTEGER` and `Number.MIN_SAFE_INTEGER` values\n * (Inclusive).\n *\n * @param {*} val\n *\n * @returns {boolean} `true` if the value is a \"safe\" number, `false` otherwise\n */\n\n\nvar isSafeNumber = function isSafeNumber(val) {\n  if (!isNumeric(val)) {\n    return false;\n  }\n\n  var castVal = Number(val);\n  return castVal <= Number.MAX_SAFE_INTEGER && castVal >= Number.MIN_SAFE_INTEGER;\n};\n/**\n * Take an array of numbers and add the values together.\n *\n * @param {number[]} numbers\n *\n * @returns {number} The summed value\n */\n\n\nvar sumArray = function sumArray(numbers) {\n  return !Array.isArray(numbers) ? 0 : numbers.reduce(function (prev, current) {\n    return prev + (isNumeric(current) ? parseFloat(\"\".concat(current)) : 0);\n  }, 0);\n};\n/**\n * Round a number to the given amount of digits after the decimal point, removing any trailing\n * zeros after the decimal point.\n *\n * @example\n * toFixed(1.236, 2); // 1.24\n * toFixed(30.1, 2); // 30.1\n * toFixed(4.0000000004, 3); // 4\n *\n * @param {number} num The number to round\n * @param {number} [precision=0] The number of digits after the decimal point\n *\n * @returns {number}\n */\n\n\nvar toFixed = function toFixed(num) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return (// round to precision, then cast to a number to remove trailing zeroes after the decimal point\n    parseFloat(parseFloat(\"\".concat(num)).toFixed(precision || 0))\n  );\n};\n\nvar SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nvar LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nvar UINT32_MAX = -1 >>> 0;\nvar UINT32_SIZE = UINT32_MAX + 1;\nvar INT32_SIZE = UINT32_SIZE / 2;\nvar INT32_MAX = INT32_SIZE - 1;\nvar UINT21_SIZE = 1 << 21;\nvar UINT21_MAX = UINT21_SIZE - 1;\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\n\nfunction _int(engine) {\n  return engine.next() | 0;\n}\n\nfunction add(distribution, addend) {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return function (engine) {\n      return distribution(engine) + addend;\n    };\n  }\n}\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\n\n\nfunction _int2(engine) {\n  var high = engine.next() | 0;\n  var low = engine.next() >>> 0;\n  return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n}\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\n\n\nfunction _int53Full(engine) {\n  while (true) {\n    var high = engine.next() | 0;\n\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      var low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    }\n  }\n}\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\n\n\nfunction _uint(engine) {\n  return engine.next() >>> 0;\n}\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\n\n\nfunction _uint2(engine) {\n  var high = engine.next() & UINT21_MAX;\n  var low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\n\n\nfunction _uint53Full(engine) {\n  while (true) {\n    var high = engine.next() | 0;\n\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      var low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\n\nfunction isPowerOfTwoMinusOne(value) {\n  return (value + 1 & value) === 0;\n}\n\nfunction bitmask(masking) {\n  return function (engine) {\n    return engine.next() & masking;\n  };\n}\n\nfunction downscaleToLoopCheckedRange(range) {\n  var extendedRange = range + 1;\n  var maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return function (engine) {\n    var value = 0;\n\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n\n    return value % extendedRange;\n  };\n}\n\nfunction downscaleToRange(range) {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\n\nfunction isEvenlyDivisibleByMaxInt32(value) {\n  return (value | 0) === 0;\n}\n\nfunction upscaleWithHighMasking(masking) {\n  return function (engine) {\n    var high = engine.next() & masking;\n    var low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\n\nfunction upscaleToLoopCheckedRange(extendedRange) {\n  var maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return function (engine) {\n    var ret = 0;\n\n    do {\n      var high = engine.next() & UINT21_MAX;\n      var low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n\n    return ret % extendedRange;\n  };\n}\n\nfunction upscaleWithinU53(range) {\n  var extendedRange = range + 1;\n\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    var highRange = (extendedRange / UINT32_SIZE | 0) - 1;\n\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n\n  return upscaleToLoopCheckedRange(extendedRange);\n}\n\nfunction upscaleWithinI53AndLoopCheck(min, max) {\n  return function (engine) {\n    var ret = 0;\n\n    do {\n      var high = engine.next() | 0;\n      var low = engine.next() >>> 0;\n      ret = (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n\n    return ret;\n  };\n}\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\n\n\nfunction _integer(min, max) {\n  min = Math.floor(min);\n  max = Math.floor(max);\n\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(\"Expected min to be at least \".concat(-SMALLEST_UNSAFE_INTEGER));\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(\"Expected max to be at most \".concat(SMALLEST_UNSAFE_INTEGER));\n  }\n\n  var range = max - min;\n\n  if (range <= 0 || !isFinite(range)) {\n    return function () {\n      return min;\n    };\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return _uint;\n    } else {\n      return add(_int, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(_uint2, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(_uint53Full, min);\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return _int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return _int2;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(_int2, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\n\nfunction isLeastBitTrue(engine) {\n  return (engine.next() & 1) === 1;\n}\n\nfunction lessThan(distribution, value) {\n  return function (engine) {\n    return distribution(engine) < value;\n  };\n}\n\nfunction probability(percentage) {\n  if (percentage <= 0) {\n    return function () {\n      return false;\n    };\n  } else if (percentage >= 1) {\n    return function () {\n      return true;\n    };\n  } else {\n    var scaled = percentage * UINT32_SIZE;\n\n    if (scaled % 1 === 0) {\n      return lessThan(_int, scaled - INT32_SIZE | 0);\n    } else {\n      return lessThan(_uint2, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\n\nfunction _bool(numerator, denominator) {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n\n    return probability(numerator);\n  } else {\n    if (numerator <= 0) {\n      return function () {\n        return false;\n      };\n    } else if (numerator >= denominator) {\n      return function () {\n        return true;\n      };\n    }\n\n    return lessThan(_integer(0, denominator - 1), numerator);\n  }\n}\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\n\n\nfunction _date(start, end) {\n  var distribution = _integer(+start, +end);\n\n  return function (engine) {\n    return new Date(distribution(engine));\n  };\n}\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\n\n\nfunction _die(sideCount) {\n  return _integer(1, sideCount);\n}\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\n\n\nfunction _dice(sideCount, dieCount) {\n  var distribution = _die(sideCount);\n\n  return function (engine) {\n    var result = [];\n\n    for (var i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n\n    return result;\n  };\n} // tslint:disable:unified-signatures\n// has 2**x chars, for faster uniform distribution\n\n\nvar DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\nfunction _string() {\n  var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STRING_POOL;\n  var poolLength = pool.length;\n\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n\n  var distribution = _integer(0, poolLength - 1);\n\n  return function (engine, length) {\n    var result = \"\";\n\n    for (var i = 0; i < length; ++i) {\n      var j = distribution(engine);\n      result += pool.charAt(j);\n    }\n\n    return result;\n  };\n}\n\nvar LOWER_HEX_POOL = \"0123456789abcdef\";\n\nvar lowerHex = _string(LOWER_HEX_POOL);\n\nvar upperHex = _string(LOWER_HEX_POOL.toUpperCase());\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\n\n\nfunction _hex(uppercase) {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\n\nfunction convertSliceArgument(value, length) {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\n\nfunction toInteger(value) {\n  var num = +value;\n\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\n\n\nfunction _pick(engine, source, begin, end) {\n  var length = source.length;\n\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n\n  var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n\n  if (start >= finish) {\n    throw new RangeError(\"Cannot pick between bounds \".concat(start, \" and \").concat(finish));\n  }\n\n  var distribution = _integer(start, finish - 1);\n\n  return source[distribution(engine)];\n}\n\nfunction multiply(distribution, multiplier) {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return function () {\n      return 0;\n    };\n  } else {\n    return function (engine) {\n      return distribution(engine) * multiplier;\n    };\n  }\n}\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\n\n\nfunction _realZeroToOneExclusive(engine) {\n  return _uint2(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\n\n\nfunction _realZeroToOneInclusive(engine) {\n  return _uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\n\n\nfunction _real(min, max) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n\n  return add(multiply(inclusive ? _realZeroToOneInclusive : _realZeroToOneExclusive, max - min), min);\n}\n\nvar sliceArray = Array.prototype.slice;\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\n\nfunction _shuffle(engine, array) {\n  var downTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var length = array.length;\n\n  if (length) {\n    for (var i = length - 1 >>> 0; i > downTo; --i) {\n      var distribution = _integer(0, i);\n\n      var j = distribution(engine);\n\n      if (i !== j) {\n        var tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n\n  return array;\n}\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\n\n\nfunction _sample(engine, population, sampleSize) {\n  if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n    throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n  }\n\n  if (sampleSize === 0) {\n    return [];\n  }\n\n  var clone = sliceArray.call(population);\n  var length = clone.length;\n\n  if (length === sampleSize) {\n    return _shuffle(engine, clone, 0);\n  }\n\n  var tailLength = length - sampleSize;\n  return _shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\n\nvar stringRepeat = function () {\n  try {\n    if (\"x\".repeat(3) === \"xxx\") {\n      return function (pattern, count) {\n        return pattern.repeat(count);\n      };\n    }\n  } catch (_) {// nothing to do here\n  }\n\n  return function (pattern, count) {\n    var result = \"\";\n\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n\n      count >>= 1;\n      pattern += pattern;\n    }\n\n    return result;\n  };\n}();\n\nfunction zeroPad(text, zeroCount) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\n\n\nfunction _uuid(engine) {\n  var a = engine.next() >>> 0;\n  var b = engine.next() | 0;\n  var c = engine.next() | 0;\n  var d = engine.next() >>> 0;\n  return zeroPad(a.toString(16), 8) + \"-\" + zeroPad((b & 0xffff).toString(16), 4) + \"-\" + zeroPad((b >> 4 & 0x0fff | 0x4000).toString(16), 4) + \"-\" + zeroPad((c & 0x3fff | 0x8000).toString(16), 4) + \"-\" + zeroPad((c >> 4 & 0xffff).toString(16), 4) + zeroPad(d.toString(16), 8);\n}\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\n\n\nvar nativeMath = {\n  next: function next() {\n    return Math.random() * UINT32_SIZE | 0;\n  }\n}; // tslint:disable:unified-signatures\n\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\n\nvar Random = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new Random wrapper\r\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n   */\n  function Random() {\n    var engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nativeMath;\n\n    _classCallCheck(this, Random);\n\n    this.engine = engine;\n  }\n  /**\r\n   * Returns a value within [-0x80000000, 0x7fffffff]\r\n   */\n\n\n  _createClass(Random, [{\n    key: \"int32\",\n    value: function int32() {\n      return _int(this.engine);\n    }\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\n\n  }, {\n    key: \"uint32\",\n    value: function uint32() {\n      return _uint(this.engine);\n    }\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\n\n  }, {\n    key: \"uint53\",\n    value: function uint53() {\n      return _uint2(this.engine);\n    }\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\n\n  }, {\n    key: \"uint53Full\",\n    value: function uint53Full() {\n      return _uint53Full(this.engine);\n    }\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\n\n  }, {\n    key: \"int53\",\n    value: function int53() {\n      return _int2(this.engine);\n    }\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\n\n  }, {\n    key: \"int53Full\",\n    value: function int53Full() {\n      return _int53Full(this.engine);\n    }\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\n\n  }, {\n    key: \"integer\",\n    value: function integer(min, max) {\n      return _integer(min, max)(this.engine);\n    }\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\n\n  }, {\n    key: \"realZeroToOneInclusive\",\n    value: function realZeroToOneInclusive() {\n      return _realZeroToOneInclusive(this.engine);\n    }\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\n\n  }, {\n    key: \"realZeroToOneExclusive\",\n    value: function realZeroToOneExclusive() {\n      return _realZeroToOneExclusive(this.engine);\n    }\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\n\n  }, {\n    key: \"real\",\n    value: function real(min, max) {\n      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return _real(min, max, inclusive)(this.engine);\n    }\n  }, {\n    key: \"bool\",\n    value: function bool(numerator, denominator) {\n      return _bool(numerator, denominator)(this.engine);\n    }\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\n\n  }, {\n    key: \"pick\",\n    value: function pick(source, begin, end) {\n      return _pick(this.engine, source, begin, end);\n    }\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\n\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(array) {\n      return _shuffle(this.engine, array);\n    }\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\n\n  }, {\n    key: \"sample\",\n    value: function sample(population, sampleSize) {\n      return _sample(this.engine, population, sampleSize);\n    }\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\n\n  }, {\n    key: \"die\",\n    value: function die(sideCount) {\n      return _die(sideCount)(this.engine);\n    }\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\n\n  }, {\n    key: \"dice\",\n    value: function dice(sideCount, dieCount) {\n      return _dice(sideCount, dieCount)(this.engine);\n    }\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\n\n  }, {\n    key: \"uuid4\",\n    value: function uuid4() {\n      return _uuid(this.engine);\n    }\n  }, {\n    key: \"string\",\n    value: function string(length, pool) {\n      return _string(pool)(this.engine, length);\n    }\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\n\n  }, {\n    key: \"hex\",\n    value: function hex(length, uppercase) {\n      return _hex(uppercase)(this.engine, length);\n    }\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\n\n  }, {\n    key: \"date\",\n    value: function date(start, end) {\n      return _date(start, end)(this.engine);\n    }\n  }]);\n\n  return Random;\n}();\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\n\n\nvar I32Array = function () {\n  try {\n    var buffer = new ArrayBuffer(4);\n    var view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {// nothing to do here\n  }\n\n  return Array;\n}();\n\nvar data = null;\nvar COUNT = 128;\nvar index$3 = COUNT;\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\n\nvar browserCrypto = {\n  next: function next() {\n    if (index$3 >= COUNT) {\n      if (data === null) {\n        data = new I32Array(COUNT);\n      }\n\n      crypto.getRandomValues(data);\n      index$3 = 0;\n    }\n\n    return data[index$3++] | 0;\n  }\n};\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\n\nfunction createEntropy() {\n  var engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nativeMath;\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  var array = [];\n  array.push(new Date().getTime() | 0);\n\n  for (var i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n\n  return array;\n}\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\n\n\nvar imul = function () {\n  try {\n    if (Math.imul(UINT32_MAX, 5) === -5) {\n      return Math.imul;\n    }\n  } catch (_) {// nothing to do here\n  }\n\n  var UINT16_MAX = 0xffff;\n  return function (a, b) {\n    var ah = a >>> 16 & UINT16_MAX;\n    var al = a & UINT16_MAX;\n    var bh = b >>> 16 & UINT16_MAX;\n    var bl = b & UINT16_MAX; // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n\n    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n  };\n}();\n\nvar ARRAY_SIZE = 624;\nvar ARRAY_MAX = ARRAY_SIZE - 1;\nvar M = 397;\nvar ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nvar A = 0x9908b0df;\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\n\nvar MersenneTwister19937 = /*#__PURE__*/function () {\n  /**\r\n   * MersenneTwister19937 should not be instantiated directly.\r\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n   */\n  function MersenneTwister19937() {\n    _classCallCheck(this, MersenneTwister19937);\n\n    this.data = new I32Array(ARRAY_SIZE);\n    this.index = 0; // integer within [0, 624]\n\n    this.uses = 0;\n  }\n  /**\r\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n   * @param initial the initial seed value\r\n   */\n\n\n  _createClass(MersenneTwister19937, [{\n    key: \"next\",\n    value:\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\n    function next() {\n      if ((this.index | 0) >= ARRAY_SIZE) {\n        refreshData(this.data);\n        this.index = 0;\n      }\n\n      var value = this.data[this.index];\n      this.index = this.index + 1 | 0;\n      this.uses += 1;\n      return temper(value) | 0;\n    }\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\n\n  }, {\n    key: \"getUseCount\",\n    value: function getUseCount() {\n      return this.uses;\n    }\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\n\n  }, {\n    key: \"discard\",\n    value: function discard(count) {\n      if (count <= 0) {\n        return this;\n      }\n\n      this.uses += count;\n\n      if ((this.index | 0) >= ARRAY_SIZE) {\n        refreshData(this.data);\n        this.index = 0;\n      }\n\n      while (count + this.index > ARRAY_SIZE) {\n        count -= ARRAY_SIZE - this.index;\n        refreshData(this.data);\n        this.index = 0;\n      }\n\n      this.index = this.index + count | 0;\n      return this;\n    }\n  }, {\n    key: \"seed\",\n    value: function seed(initial) {\n      var previous = 0;\n      this.data[0] = previous = initial | 0;\n\n      for (var i = 1; i < ARRAY_SIZE; i = i + 1 | 0) {\n        this.data[i] = previous = imul(previous ^ previous >>> 30, 0x6c078965) + i | 0;\n      }\n\n      this.index = ARRAY_SIZE;\n      this.uses = 0;\n      return this;\n    }\n  }, {\n    key: \"seedWithArray\",\n    value: function seedWithArray(source) {\n      this.seed(0x012bd6aa);\n\n      _seedWithArray(this.data, source);\n\n      return this;\n    }\n  }], [{\n    key: \"seed\",\n    value: function seed(initial) {\n      return new MersenneTwister19937().seed(initial);\n    }\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\n\n  }, {\n    key: \"seedWithArray\",\n    value: function seedWithArray(source) {\n      return new MersenneTwister19937().seedWithArray(source);\n    }\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\n\n  }, {\n    key: \"autoSeed\",\n    value: function autoSeed() {\n      return MersenneTwister19937.seedWithArray(createEntropy());\n    }\n  }]);\n\n  return MersenneTwister19937;\n}();\n\nfunction refreshData(data) {\n  var k = 0;\n  var tmp = 0;\n\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = k + 1 | 0) {\n    tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;\n    data[k] = data[k + M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n  }\n\n  for (; (k | 0) < ARRAY_MAX; k = k + 1 | 0) {\n    tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;\n    data[k] = data[k - ARRAY_SIZE_MINUS_M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n  }\n\n  tmp = data[ARRAY_MAX] & INT32_SIZE | data[0] & INT32_MAX;\n  data[ARRAY_MAX] = data[M - 1] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);\n}\n\nfunction temper(value) {\n  value ^= value >>> 11;\n  value ^= value << 7 & 0x9d2c5680;\n  value ^= value << 15 & 0xefc60000;\n  return value ^ value >>> 18;\n}\n\nfunction _seedWithArray(data, source) {\n  var i = 1;\n  var j = 0;\n  var sourceLength = source.length;\n  var k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  var previous = data[0] | 0;\n\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x0019660d)) + (source[j] | 0) + (j | 0) | 0;\n    i = i + 1 | 0;\n    ++j;\n\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x5d588b65)) - i | 0;\n    i = i + 1 | 0;\n\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n\n  data[0] = INT32_SIZE;\n}\n\nvar data$1 = null;\nvar COUNT$1 = 128;\nvar index$1$1 = COUNT$1;\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\n\nvar nodeCrypto = {\n  next: function next() {\n    if (index$1$1 >= COUNT$1) {\n      data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\n      index$1$1 = 0;\n    }\n\n    return data$1[index$1$1++] | 0;\n  }\n};\n/**\n * The engine\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar engineSymbol = Symbol('engine');\n/**\n * The random object\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar randomSymbol = Symbol('random');\n/**\n * Engine that always returns the maximum value.\n * Used internally for calculating max roll values.\n *\n * @since 4.2.0\n *\n * @type {{next(): number, range: number[]}}\n */\n\nvar maxEngine = {\n  /**\n   * The min / max number range (e.g. `[1, 10]`).\n   *\n   * This _must_ be set for the `next()` method to return the correct last index.\n   *\n   * @example\n   * maxEngine.range = [1, 10];\n   *\n   * @type {number[]}\n   */\n  range: [],\n\n  /**\n   * Returns the maximum number index for the range\n   *\n   * @returns {number}\n   */\n  next: function next() {\n    // calculate the index of the max number\n    return this.range[1] - this.range[0];\n  }\n};\n/**\n * Engine that always returns the minimum value.\n * Used internally for calculating min roll values.\n *\n * @since 4.2.0\n *\n * @type {{next(): number}}\n */\n\nvar minEngine = {\n  /**\n   * Returns the minimum number index, `0`\n   *\n   * @returns {number}\n   */\n  next: function next() {\n    return 0;\n  }\n};\n/**\n * List of built-in number generator engines.\n *\n * @since 4.2.0\n *\n * @see This uses [random-js](https://github.com/ckknight/random-js).\n * For details of the engines, check the [documentation](https://github.com/ckknight/random-js#engines).\n *\n * @type {{\n *  min: {next(): number},\n *  max: {next(): number, range: number[]},\n *  browserCrypto: Engine,\n *  nodeCrypto: Engine,\n *  MersenneTwister19937: MersenneTwister19937,\n *  nativeMath: Engine\n * }}\n */\n\nvar engines = {\n  browserCrypto: browserCrypto,\n  nodeCrypto: nodeCrypto,\n  MersenneTwister19937: MersenneTwister19937,\n  nativeMath: nativeMath,\n  min: minEngine,\n  max: maxEngine\n};\n/**\n * The `NumberGenerator` is capable of generating random numbers.\n *\n * @since 4.2.0\n *\n * @see This uses [random-js](https://github.com/ckknight/random-js).\n * For details of the engines, check the [documentation](https://github.com/ckknight/random-js#engines).\n */\n\nvar NumberGenerator = /*#__PURE__*/function () {\n  /**\n   * Create a `NumberGenerator` instance.\n   *\n   * The `engine` can be any object that has a `next()` method, which returns a number.\n   *\n   * @example <caption>Built-in engine</caption>\n   * new NumberGenerator(engines.nodeCrypto);\n   *\n   * @example <caption>Custom engine</caption>\n   * new NumberGenerator({\n   *   next() {\n   *     // return a random number\n   *   },\n   * });\n   *\n   * @param {Engine|{next(): number}} [engine=nativeMath] The RNG engine to use\n   *\n   * @throws {TypeError} engine must have function `next()`\n   */\n  function NumberGenerator() {\n    var engine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nativeMath;\n\n    _classCallCheck(this, NumberGenerator);\n\n    this.engine = engine || nativeMath;\n  }\n  /**\n   * The current engine.\n   *\n   * @returns {Engine|{next(): number}}\n   */\n\n\n  _createClass(NumberGenerator, [{\n    key: \"engine\",\n    get: function get() {\n      return this[engineSymbol];\n    }\n    /**\n     * Set the engine.\n     *\n     * The `engine` can be any object that has a `next()` method, which returns a number.\n     *\n     * @example <caption>Built-in engine</caption>\n     * numberGenerator.engine = engines.nodeCrypto;\n     *\n     * @example <caption>Custom engine</caption>\n     * numberGenerator.engine = {\n     *   next() {\n     *     // return a random number\n     *   },\n     * });\n     *\n     * @see {@link engines}\n     *\n     * @param {Engine|{next(): number}} engine\n     *\n     * @throws {TypeError} engine must have function `next()`\n     */\n    ,\n    set: function set(engine) {\n      if (engine && typeof engine.next !== 'function') {\n        throw new TypeError('engine must have function `next()`');\n      } // set the engine and re-initialise the random engine\n\n\n      this[engineSymbol] = engine || nativeMath;\n      this[randomSymbol] = new Random(this[engineSymbol]);\n    }\n    /**\n     * Generate a random integer within the inclusive range `[min, max]`.\n     *\n     * @param {number} min The minimum integer value, inclusive.\n     * @param {number} max The maximum integer value, inclusive.\n     *\n     * @returns {number} The random integer\n     */\n\n  }, {\n    key: \"integer\",\n    value: function integer(min, max) {\n      this[engineSymbol].range = [min, max];\n      return this[randomSymbol].integer(min, max);\n    }\n    /**\n     * Returns a floating-point value within `[min, max)` or `[min, max]`.\n     *\n     * @param {number} min The minimum floating-point value, inclusive.\n     * @param {number} max The maximum floating-point value.\n     * @param {boolean} [inclusive=false] If `true`, `max` will be inclusive.\n     *\n     * @returns {number} The random floating-point value\n     */\n\n  }, {\n    key: \"real\",\n    value: function real(min, max) {\n      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this[engineSymbol].range = [min, max];\n      return this[randomSymbol].real(min, max, inclusive);\n    }\n  }]);\n\n  return NumberGenerator;\n}();\n\nvar generator = new NumberGenerator();\nvar NumberGenerator$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  engines: engines,\n  generator: generator\n});\n/**\n * The operator\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar operatorSymbol = Symbol('operator');\n/**\n * The value\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar valueSymbol$1 = Symbol('value');\n/**\n * A `ComparePoint` object compares numbers against each other.\n * For example, _is 6 greater than 3_, or _is 8 equal to 10_.\n */\n\nvar ComparePoint = /*#__PURE__*/function () {\n  /**\n   * Create a `ComparePoint` instance.\n   *\n   * @param {string} operator The comparison operator (One of `=`, `!=`, `<>`, `<`, `>`, `<=`, `>=`)\n   * @param {number} value The value to compare to\n   *\n   * @throws {CompareOperatorError} operator is invalid\n   * @throws {RequiredArgumentError} operator and value are required\n   * @throws {TypeError} value must be numeric\n   */\n  function ComparePoint(operator, value) {\n    _classCallCheck(this, ComparePoint);\n\n    if (!operator) {\n      throw new RequiredArgumentError('operator');\n    } else if (!value && value !== 0) {\n      throw new RequiredArgumentError('value');\n    }\n\n    this.operator = operator;\n    this.value = value;\n  }\n  /**\n   * Check if the operator is valid.\n   *\n   * @param {string} operator\n   *\n   * @returns {boolean} `true` if the operator is valid, `false` otherwise\n   */\n\n\n  _createClass(ComparePoint, [{\n    key: \"operator\",\n    get:\n    /**\n     * The comparison operator.\n     *\n     * @returns {string}\n     */\n    function get() {\n      return this[operatorSymbol];\n    }\n    /**\n     * Set the value.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} value must be numeric\n     */\n    ,\n    set:\n    /**\n     * Set the comparison operator.\n     *\n     * @param {string} operator One of `=`, `!=`, `<>`, `<`, `>`, `<=`, `>=`\n     *\n     * @throws CompareOperatorError operator is invalid\n     */\n    function set(operator) {\n      if (!this.constructor.isValidOperator(operator)) {\n        throw new CompareOperatorError(operator);\n      }\n\n      this[operatorSymbol] = operator;\n    }\n  }, {\n    key: \"value\",\n    get:\n    /**\n     * The comparison value\n     *\n     * @returns {number}\n     */\n    function get() {\n      return this[valueSymbol$1];\n    }\n    /**\n     * Check whether value matches the compare point\n     *\n     * @param {number} value The number to compare\n     *\n     * @returns {boolean} `true` if it is a match, `false` otherwise\n     */\n    ,\n    set: function set(value) {\n      if (!isNumeric(value)) {\n        throw new TypeError('value must be a finite number');\n      }\n\n      this[valueSymbol$1] = Number(value);\n    }\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value) {\n      return compareNumbers(value, this.value, this.operator);\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{type: string, value: number, operator: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var operator = this.operator,\n          value = this.value;\n      return {\n        operator: operator,\n        type: 'compare-point',\n        value: value\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.operator).concat(this.value);\n    }\n  }], [{\n    key: \"isValidOperator\",\n    value: function isValidOperator(operator) {\n      return typeof operator === 'string' && /^(?:[<>!]?=|[<>]|<>)$/.test(operator);\n    }\n  }]);\n\n  return ComparePoint;\n}();\n/**\n * A `Modifier` is the base modifier class that all others extend from.\n *\n * ::: warning Abstract class\n * This is meant as an abstract class and should not be used directly.\n * :::\n *\n * @abstract\n */\n\n\nvar Modifier = /*#__PURE__*/function () {\n  /**\n   * Create a `Modifier` instance.\n   */\n  function Modifier() {\n    _classCallCheck(this, Modifier);\n\n    // set the modifier's sort order\n    this.order = 999;\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the modifier.\n   *\n   * @returns {string} 'modifier'\n   */\n\n\n  _createClass(Modifier, [{\n    key: \"name\",\n    get: function get() {\n      return 'modifier';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return '';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The maximum number of iterations that the modifier can apply to a single die roll\n     *\n     * @returns {number} `1000`\n     */\n\n  }, {\n    key: \"maxIterations\",\n    get: function get() {\n      return 1000;\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      return results;\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{notation: string, name: string, type: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var notation = this.notation,\n          name = this.name;\n      return {\n        name: name,\n        notation: notation,\n        type: 'modifier'\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @see {@link Modifier#notation}\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.notation;\n    }\n  }]);\n\n  return Modifier;\n}();\n\nvar comparePointSymbol = Symbol('compare-point');\n/**\n * A `ComparisonModifier` is the base modifier class for comparing values.\n *\n * ::: warning Abstract class\n * This is meant as an abstract class and should not be used directly.\n * You can use one of the extended modifiers, or extend the class yourself.\n * :::\n *\n * @abstract\n *\n * @extends Modifier\n *\n * @see {@link CriticalFailureModifier}\n * @see {@link CriticalSuccessModifier}\n * @see {@link ExplodeModifier}\n * @see {@link ReRollModifier}\n * @see {@link TargetModifier}\n */\n\nvar ComparisonModifier = /*#__PURE__*/function (_Modifier) {\n  _inherits(ComparisonModifier, _Modifier);\n\n  var _super6 = _createSuper(ComparisonModifier);\n\n  /**\n   * Create a `ComparisonModifier` instance.\n   *\n   * @param {ComparePoint} [comparePoint] The comparison object\n   *\n   * @throws {TypeError} `comparePoint` must be an instance of `ComparePoint` or `undefined`\n   */\n  function ComparisonModifier(comparePoint) {\n    var _this6;\n\n    _classCallCheck(this, ComparisonModifier);\n\n    _this6 = _super6.call(this);\n\n    if (comparePoint) {\n      _this6.comparePoint = comparePoint;\n    }\n\n    return _this6;\n  }\n  /**\n   * The compare point.\n   *\n   * @returns {ComparePoint|undefined}\n   */\n\n\n  _createClass(ComparisonModifier, [{\n    key: \"comparePoint\",\n    get: function get() {\n      return this[comparePointSymbol];\n    }\n    /**\n     * Set the compare point.\n     *\n     * @param {ComparePoint} comparePoint\n     *\n     * @throws {TypeError} value must be an instance of `ComparePoint`\n     */\n    ,\n    set: function set(comparePoint) {\n      if (!(comparePoint instanceof ComparePoint)) {\n        throw new TypeError('comparePoint must be instance of ComparePoint');\n      }\n\n      this[comparePointSymbol] = comparePoint;\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'comparison'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'comparison';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"\".concat(this.comparePoint || '');\n    }\n    /**\n     * Check whether value matches the compare point or not.\n     *\n     * @param {number} value The value to compare with\n     *\n     * @returns {boolean} `true` if the value matches, `false` otherwise\n     */\n\n  }, {\n    key: \"isComparePoint\",\n    value: function isComparePoint(value) {\n      if (!this.comparePoint) {\n        return false;\n      }\n\n      return this.comparePoint.isMatch(value);\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  notation: string,\n     *  name: string,\n     *  type: string,\n     *  comparePoint: (ComparePoint|undefined)\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var comparePoint = this.comparePoint;\n      return Object.assign(_get(_getPrototypeOf(ComparisonModifier.prototype), \"toJSON\", this).call(this), {\n        comparePoint: comparePoint\n      });\n    }\n  }]);\n\n  return ComparisonModifier;\n}(Modifier);\n\nvar compoundSymbol = Symbol('compound');\nvar penetrateSymbol = Symbol('penetrate');\n/**\n * An `ExplodeModifier` re-rolls dice that match a given test, and adds them to the results.\n *\n * @see {@link ReRollModifier} if you want to replace the old value with the new, rather than adding\n *\n * @extends ComparisonModifier\n */\n\nvar ExplodeModifier = /*#__PURE__*/function (_ComparisonModifier) {\n  _inherits(ExplodeModifier, _ComparisonModifier);\n\n  var _super7 = _createSuper(ExplodeModifier);\n\n  /**\n   * Create an `ExplodeModifier` instance\n   *\n   * @param {ComparePoint} [comparePoint=null] The comparison object\n   * @param {boolean} [compound=false] Whether to compound or not\n   * @param {boolean} [penetrate=false] Whether to penetrate or not\n   *\n   * @throws {TypeError} comparePoint must be a `ComparePoint` object\n   */\n  function ExplodeModifier() {\n    var _this7;\n\n    var comparePoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var compound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var penetrate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, ExplodeModifier);\n\n    _this7 = _super7.call(this, comparePoint);\n    _this7[compoundSymbol] = !!compound;\n    _this7[penetrateSymbol] = !!penetrate; // set the modifier's sort order\n\n    _this7.order = 3;\n    return _this7;\n  }\n  /**\n   * Whether the modifier should compound the results or not.\n   *\n   * @returns {boolean} `true` if it should compound, `false` otherwise\n   */\n\n\n  _createClass(ExplodeModifier, [{\n    key: \"compound\",\n    get: function get() {\n      return this[compoundSymbol];\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'explode'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'explode';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"!\".concat(this.compound ? '!' : '').concat(this.penetrate ? 'p' : '').concat(_get(_getPrototypeOf(ExplodeModifier.prototype), \"notation\", this));\n    }\n    /**\n     * Whether the modifier should penetrate the results or not.\n     *\n     * @returns {boolean} `true` if it should penetrate, `false` otherwise\n     */\n\n  }, {\n    key: \"penetrate\",\n    get: function get() {\n      return this[penetrateSymbol];\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this8 = this;\n\n      // ensure that the dice can explode without going into an infinite loop\n      if (_context.min === _context.max) {\n        throw new DieActionValueError(_context, 'explode');\n      }\n\n      var parsedResults = results;\n      parsedResults.rolls = results.rolls.map(function (roll) {\n        var subRolls = [roll];\n        var compareValue = roll.value; // explode if the value matches the compare point, and we haven't reached the max iterations\n\n        for (var i = 0; i < _this8.maxIterations && _this8.isComparePoint(compareValue); i++) {\n          var prevRoll = subRolls[subRolls.length - 1]; // roll the dice\n\n          var rollResult = _context.rollOnce(); // update the value to check against\n\n\n          compareValue = rollResult.value; // add the explode modifier flag\n\n          prevRoll.modifiers.add('explode'); // add the penetrate modifier flag and decrement the value\n\n          if (_this8.penetrate) {\n            prevRoll.modifiers.add('penetrate');\n            rollResult.value -= 1;\n          } // add the rolls to the list\n\n\n          subRolls.push(rollResult);\n        } // return the rolls (Compounded if necessary)\n\n        /* eslint-disable  no-param-reassign */\n\n\n        if (_this8.compound && subRolls.length > 1) {\n          // update the roll value and modifiers\n          roll.value = sumArray(subRolls.map(function (result) {\n            return result.value;\n          }));\n          roll.modifiers = ['explode', 'compound'];\n\n          if (_this8.penetrate) {\n            roll.modifiers.add('penetrate');\n          }\n\n          return roll;\n        }\n        /* eslint-enable */\n\n\n        return subRolls;\n      }).flat();\n      return parsedResults;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  notation: string,\n     *  name: string,\n     *  type: string,\n     *  comparePoint: (ComparePoint|undefined),\n     *  compound: boolean,\n     *  penetrate: boolean\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var compound = this.compound,\n          penetrate = this.penetrate;\n      return Object.assign(_get(_getPrototypeOf(ExplodeModifier.prototype), \"toJSON\", this).call(this), {\n        compound: compound,\n        penetrate: penetrate\n      });\n    }\n  }]);\n\n  return ExplodeModifier;\n}(ComparisonModifier);\n\nvar flags = {\n  compound: '!',\n  explode: '!',\n  'critical-failure': '__',\n  'critical-success': '**',\n  drop: 'd',\n  max: 'v',\n  min: '^',\n  penetrate: 'p',\n  're-roll': 'r',\n  're-roll-once': 'ro',\n  'target-failure': '_',\n  'target-success': '*'\n};\n/**\n * Return the flags for the given list of modifiers\n *\n * @param {...Modifier|string} modifiers\n *\n * @returns {string}\n */\n\nvar getModifierFlags = function getModifierFlags() {\n  for (var _len = arguments.length, modifiers = new Array(_len), _key = 0; _key < _len; _key++) {\n    modifiers[_key] = arguments[_key];\n  }\n\n  return (// @todo need a better way of mapping modifiers to symbols\n    [].concat(modifiers).reduce(function (acc, modifier) {\n      var name;\n\n      if (modifier instanceof Modifier) {\n        name = modifier.name;\n      } else {\n        name = modifier;\n      }\n\n      return acc + (flags[name] || name);\n    }, '')\n  );\n};\n\nvar calculationValueSymbol$1 = Symbol('calculation-value');\nvar modifiersSymbol$3 = Symbol('modifiers');\nvar initialValueSymbol = Symbol('initial-value');\nvar useInTotalSymbol$1 = Symbol('use-in-total');\nvar valueSymbol = Symbol('value');\n/**\n * A `RollResult` represents the value and applicable modifiers for a single die roll\n *\n * ::: tip\n * You will probably not need to create your own `RollResult` instances, unless you're importing\n * rolls, but `RollResult` objects will be returned when rolling dice.\n * :::\n */\n\nvar RollResult = /*#__PURE__*/function () {\n  /**\n   * Create a `RollResult` instance.\n   *\n   * `value` can be a number, or an object containing a list of different values.\n   * This allows you to specify the `initialValue`, `value` and `calculationValue` with different\n   * values.\n   *\n   * @example <caption>Numerical value</caption>\n   * const result = new RollResult(4);\n   *\n   * @example <caption>Object value</caption>\n   * // must provide either `value` or `initialValue`\n   * // `calculationValue` is optional.\n   * const result = new RollResult({\n   *   value: 6,\n   *   initialValue: 4,\n   *   calculationValue: 8,\n   * });\n   *\n   * @example <caption>With modifiers</caption>\n   * const result = new RollResult(4, ['explode', 'critical-success']);\n   *\n   * @param {number|{value: number, initialValue: number, calculationValue: number}} value The value\n   * rolled\n   * @param {number} [value.value] The value with modifiers applied\n   * @param {number} [value.initialValue] The initial, unmodified value rolled\n   * @param {number} [value.calculationValue] The value used in calculations\n   * @param {string[]|Set<string>} [modifiers=[]] List of modifier names that affect this roll\n   * @param {boolean} [useInTotal=true] Whether to include the roll value when calculating totals\n   *\n   * @throws {TypeError} Result value, calculation value, or modifiers are invalid\n   */\n  function RollResult(value) {\n    var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var useInTotal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, RollResult);\n\n    if (isNumeric(value)) {\n      this[initialValueSymbol] = Number(value);\n      this.modifiers = modifiers || [];\n      this.useInTotal = useInTotal;\n    } else if (value && typeof value === 'object' && !Array.isArray(value)) {\n      // ensure that we have a valid value\n      var initialVal = isNumeric(value.initialValue) ? value.initialValue : value.value;\n\n      if (!isNumeric(initialVal)) {\n        throw new TypeError(\"Result value is invalid: \".concat(initialVal));\n      }\n\n      this[initialValueSymbol] = Number(initialVal);\n\n      if (isNumeric(value.value) && Number(value.value) !== this[initialValueSymbol]) {\n        this.value = value.value;\n      }\n\n      if (isNumeric(value.calculationValue) && parseFloat(\"\".concat(value.calculationValue)) !== this.value) {\n        this.calculationValue = value.calculationValue;\n      }\n\n      this.modifiers = value.modifiers || modifiers || [];\n      this.useInTotal = typeof value.useInTotal === 'boolean' ? value.useInTotal : useInTotal || false;\n    } else if (value === Infinity) {\n      throw new RangeError('Result value must be a finite number');\n    } else {\n      throw new TypeError(\"Result value is invalid: \".concat(value));\n    }\n  }\n  /**\n   * The value to use in calculations.\n   * This may be changed by modifiers.\n   *\n   * @returns {number}\n   */\n\n\n  _createClass(RollResult, [{\n    key: \"calculationValue\",\n    get: function get() {\n      return isNumeric(this[calculationValueSymbol$1]) ? parseFloat(this[calculationValueSymbol$1]) : this.value;\n    }\n    /**\n     * Set the value to use in calculations.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} value is invalid\n     */\n    ,\n    set: function set(value) {\n      var isValNumeric = isNumeric(value);\n\n      if (value === Infinity) {\n        throw new RangeError('Result calculation value must be a finite number');\n      }\n\n      if (value && !isValNumeric) {\n        throw new TypeError(\"Result calculation value is invalid: \".concat(value));\n      }\n\n      this[calculationValueSymbol$1] = isValNumeric ? parseFloat(\"\".concat(value)) : null;\n    }\n    /**\n     * The initial roll value before any modifiers.\n     *\n     * Not used for calculations and is just for reference.\n     * You probably want `value` instead.\n     *\n     * @see {@link RollResult#value}\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"initialValue\",\n    get: function get() {\n      return this[initialValueSymbol];\n    }\n    /**\n     * The visual flags for the modifiers that affect the roll.\n     *\n     * @see {@link RollResult#modifiers}\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"modifierFlags\",\n    get: function get() {\n      return getModifierFlags.apply(void 0, _toConsumableArray(this.modifiers));\n    }\n    /**\n     * The names of modifiers that affect the roll.\n     *\n     * @returns {Set<string>}\n     */\n\n  }, {\n    key: \"modifiers\",\n    get: function get() {\n      return this[modifiersSymbol$3];\n    }\n    /**\n     * Set the modifier names that affect the roll.\n     *\n     * @example\n     * rollResult.modifiers = ['explode', 're-roll'];\n     *\n     * @param {string[]|Set<string>} value\n     *\n     * @throws {TypeError} modifiers must be a Set or array of modifier names\n     */\n    ,\n    set: function set(value) {\n      if ((Array.isArray(value) || value instanceof Set) && _toConsumableArray(value).every(function (item) {\n        return typeof item === 'string';\n      })) {\n        this[modifiersSymbol$3] = new Set(_toConsumableArray(value));\n        return;\n      }\n\n      if (!value && value !== 0) {\n        // clear the modifiers\n        this[modifiersSymbol$3] = new Set();\n        return;\n      }\n\n      throw new TypeError(\"modifiers must be a Set or array of modifier names: \".concat(value));\n    }\n    /**\n     * Whether to use the value in total calculations or not.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"useInTotal\",\n    get: function get() {\n      return !!this[useInTotalSymbol$1];\n    }\n    /**\n     * Set whether to use the value in total calculations or not.\n     *\n     * @param {boolean} value\n     */\n    ,\n    set: function set(value) {\n      this[useInTotalSymbol$1] = !!value;\n    }\n    /**\n     * Value of the roll after modifiers have been applied.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return isNumeric(this[valueSymbol]) ? this[valueSymbol] : this[initialValueSymbol];\n    }\n    /**\n     * Set the roll value.\n     *\n     * @param {number} value\n     *\n     * @throws {RangeError} value must be finite\n     * @throws {TypeError} value is invalid\n     */\n    ,\n    set: function set(value) {\n      if (value === Infinity) {\n        throw new RangeError('Result value must be a finite number');\n      }\n\n      if (!isNumeric(value)) {\n        throw new TypeError(\"Result value is invalid: \".concat(value));\n      }\n\n      this[valueSymbol] = Number(value);\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  calculationValue: number,\n     *  modifierFlags: string,\n     *  modifiers: string[],\n     *  type: string,\n     *  initialValue: number,\n     *  useInTotal: boolean,\n     *  value: number\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var calculationValue = this.calculationValue,\n          initialValue = this.initialValue,\n          modifierFlags = this.modifierFlags,\n          modifiers = this.modifiers,\n          useInTotal = this.useInTotal,\n          value = this.value;\n      return {\n        calculationValue: calculationValue,\n        initialValue: initialValue,\n        modifierFlags: modifierFlags,\n        modifiers: _toConsumableArray(modifiers),\n        type: 'result',\n        useInTotal: useInTotal,\n        value: value\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value + this.modifierFlags;\n    }\n  }]);\n\n  return RollResult;\n}();\n\nvar rollsSymbol$1 = Symbol('rolls');\n/**\n * A collection of die roll results\n *\n * ::: tip\n * You will probably not need to create your own `RollResults` instances, unless you're importing\n * rolls, but RollResults objects will be returned when rolling dice.\n * :::\n */\n\nvar RollResults = /*#__PURE__*/function () {\n  /**\n   * Create a `RollResults` instance.\n   *\n   * @example <caption>`RollResult` objects</caption>\n   * const results = new RollResults([\n   *  new RollResult(4),\n   *  new RollResult(3),\n   *  new RollResult(5),\n   * ]);\n   *\n   * @example <caption>Numerical results</caption>\n   * const results = new RollResults([4, 3, 5]);\n   *\n   * @example <caption>A mix</caption>\n   * const results = new RollResults([\n   *  new RollResult(4),\n   *  3,\n   *  new RollResult(5),\n   * ]);\n   *\n   * @param {Array.<RollResult|number>} [rolls=[]] The roll results\n   *\n   * @throws {TypeError} Rolls must be an array\n   */\n  function RollResults() {\n    var rolls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, RollResults);\n\n    this.rolls = rolls;\n  }\n  /**\n   * The number of roll results.\n   *\n   * @returns {number}\n   */\n\n\n  _createClass(RollResults, [{\n    key: \"length\",\n    get: function get() {\n      return this.rolls.length || 0;\n    }\n    /**\n     * List of roll results.\n     *\n     * @returns {RollResult[]}\n     */\n\n  }, {\n    key: \"rolls\",\n    get: function get() {\n      return _toConsumableArray(this[rollsSymbol$1]);\n    }\n    /**\n     * Set the rolls.\n     *\n     * @param {RollResult[]|number[]} rolls\n     *\n     * @throws {TypeError} Rolls must be an array\n     */\n    ,\n    set: function set(rolls) {\n      var _this9 = this;\n\n      if (!rolls || !Array.isArray(rolls)) {\n        // roll is not an array\n        throw new TypeError(\"rolls must be an array: \".concat(rolls));\n      } // loop through each result and add it to the rolls list\n\n\n      this[rollsSymbol$1] = [];\n      rolls.forEach(function (result) {\n        _this9.addRoll(result);\n      });\n    }\n    /**\n     * The total value of all the rolls after modifiers have been applied.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.rolls.reduce(function (v, roll) {\n        return v + (roll.useInTotal ? roll.calculationValue : 0);\n      }, 0);\n    }\n    /**\n     * Add a single roll to the list.\n     *\n     * @param {RollResult|number} value\n     */\n\n  }, {\n    key: \"addRoll\",\n    value: function addRoll(value) {\n      var result = value instanceof RollResult ? value : new RollResult(value);\n      this[rollsSymbol$1].push(result);\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{rolls: RollResult[], value: number}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var rolls = this.rolls,\n          value = this.value;\n      return {\n        rolls: rolls,\n        type: 'roll-results',\n        value: value\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.rolls.join(', '), \"]\");\n    }\n  }]);\n\n  return RollResults;\n}();\n\nvar onceSymbol = Symbol('once');\n/**\n * A `ReRollModifier` re-rolls dice that match a given test, and replaces the new value with the old\n * one.\n *\n * @see {@link ExplodeModifier} if you want to keep the old value as well\n *\n * @extends ComparisonModifier\n */\n\nvar ReRollModifier = /*#__PURE__*/function (_ComparisonModifier2) {\n  _inherits(ReRollModifier, _ComparisonModifier2);\n\n  var _super8 = _createSuper(ReRollModifier);\n\n  /**\n   * Create a `ReRollModifier` instance.\n   *\n   * @param {boolean} [once=false] Whether to only re-roll once or not\n   * @param {ComparePoint} [comparePoint=null] The comparison object\n   */\n  function ReRollModifier() {\n    var _this10;\n\n    var once = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var comparePoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, ReRollModifier);\n\n    _this10 = _super8.call(this, comparePoint);\n    _this10.once = !!once; // set the modifier's sort order\n\n    _this10.order = 4;\n    return _this10;\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the modifier.\n   *\n   * @returns {string} 're-roll'\n   */\n\n\n  _createClass(ReRollModifier, [{\n    key: \"name\",\n    get: function get() {\n      return 're-roll';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"r\".concat(this.once ? 'o' : '').concat(_get(_getPrototypeOf(ReRollModifier.prototype), \"notation\", this));\n    }\n    /**\n     * Whether the modifier should only re-roll once or not.\n     *\n     * @returns {boolean} `true` if it should re-roll once, `false` otherwise\n     */\n\n  }, {\n    key: \"once\",\n    get: function get() {\n      return !!this[onceSymbol];\n    }\n    /**\n     * Set whether the modifier should only re-roll once or not.\n     *\n     * @param {boolean} value\n     */\n    ,\n    set: function set(value) {\n      this[onceSymbol] = !!value;\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this11 = this;\n\n      // ensure that the dice can explode without going into an infinite loop\n      if (_context.min === _context.max) {\n        throw new DieActionValueError(_context, 're-roll');\n      }\n\n      results.rolls.map(function (roll) {\n        // re-roll if the value matches the compare point and we haven't reached the max iterations,\n        // unless we're only rolling once and have already re-rolled\n        for (var i = 0; i < _this11.maxIterations && _this11.isComparePoint(roll.value); i++) {\n          // re-roll the dice\n          var rollResult = _context.rollOnce(); // update the roll value (Unlike exploding, the original value is not kept)\n          // eslint-disable-next-line no-param-reassign\n\n\n          roll.value = rollResult.value; // add the re-roll modifier flag\n\n          roll.modifiers.add(\"re-roll\".concat(_this11.once ? '-once' : '')); // stop the loop if we're only re-rolling once\n\n          if (_this11.once) {\n            break;\n          }\n        }\n\n        return roll;\n      });\n      return results;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  notation: string,\n     *  name: string,\n     *  type: string,\n     *  comparePoint: (ComparePoint|undefined),\n     *  once: boolean\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var once = this.once;\n      return Object.assign(_get(_getPrototypeOf(ReRollModifier.prototype), \"toJSON\", this).call(this), {\n        once: once\n      });\n    }\n  }]);\n\n  return ReRollModifier;\n}(ComparisonModifier);\n\nvar modifiersSymbol$2 = Symbol('modifiers');\nvar qtySymbol$1 = Symbol('qty');\nvar sidesSymbol = Symbol('sides');\nvar minSymbol$1 = Symbol('min-value');\nvar maxSymbol$1 = Symbol('max-value');\n/**\n * Represents a standard numerical die.\n */\n\nvar StandardDice = /*#__PURE__*/function () {\n  /**\n   * Create a `StandardDice` instance.\n   *\n   * @param {number} sides The number of sides the die has (.e.g `6`)\n   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)\n   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die\n   * @param {number|null} [min=1] The minimum possible roll value\n   * @param {number|null} [max=null] The maximum possible roll value. Defaults to number of `sides`\n   *\n   * @throws {RequiredArgumentError} sides is required\n   * @throws {TypeError} qty must be a positive integer, and modifiers must be valid\n   */\n  function StandardDice(sides) {\n    var qty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var modifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n    _classCallCheck(this, StandardDice);\n\n    if (!sides && sides !== 0) {\n      throw new RequiredArgumentError('sides');\n    } else if (sides === Infinity) {\n      throw new RangeError('numerical sides must be finite number');\n    } else if (isNumeric(sides)) {\n      if (sides < 1 || !isSafeNumber(sides)) {\n        throw new RangeError('numerical sides must be a positive finite number');\n      }\n    } else if (typeof sides !== 'string') {\n      throw new TypeError('non-numerical sides must be a string');\n    }\n\n    if (!isNumeric(qty)) {\n      throw new TypeError('qty must be a positive finite integer');\n    } else if (qty < 1 || qty > 999) {\n      throw new RangeError('qty must be between 1 and 999');\n    }\n\n    if (!isNumeric(min)) {\n      throw new TypeError('min must a finite number');\n    } else if (!isSafeNumber(min)) {\n      throw new RangeError('min must a finite number');\n    }\n\n    if (max && !isNumeric(max)) {\n      throw new TypeError('max must a finite number');\n    } else if (max && !isSafeNumber(max)) {\n      throw new RangeError('max must a finite number');\n    }\n\n    this[qtySymbol$1] = parseInt(\"\".concat(qty), 10);\n    this[sidesSymbol] = sides;\n\n    if (modifiers) {\n      this.modifiers = modifiers;\n    }\n\n    this[minSymbol$1] = parseInt(min, 10);\n    this[maxSymbol$1] = max ? parseInt(\"\".concat(max), 10) : sides;\n  }\n  /**\n   * The average value that the die can roll (Excluding modifiers).\n   *\n   * @returns {number}\n   */\n\n\n  _createClass(StandardDice, [{\n    key: \"average\",\n    get: function get() {\n      return (this.min + this.max) / 2;\n    }\n    /**\n     * The modifiers that affect this die roll.\n     *\n     * @returns {Map<string, Modifier>|null}\n     */\n\n  }, {\n    key: \"modifiers\",\n    get: function get() {\n      if (this[modifiersSymbol$2]) {\n        // ensure modifiers are ordered correctly\n        return new Map(_toConsumableArray(this[modifiersSymbol$2]).sort(function (a, b) {\n          return a[1].order - b[1].order;\n        }));\n      }\n\n      return null;\n    }\n    /**\n     * Set the modifiers that affect this roll.\n     *\n     * @param {Map<string, Modifier>|Modifier[]|{}|null} value\n     *\n     * @throws {TypeError} Modifiers should be a Map, array of Modifiers, or an Object\n     */\n    ,\n    set: function set(value) {\n      var _this12 = this;\n\n      var modifiers;\n\n      if (value instanceof Map) {\n        modifiers = value;\n      } else if (Array.isArray(value)) {\n        // loop through and get the modifier name of each item and use it as the map key\n        modifiers = new Map(value.map(function (modifier) {\n          return [modifier.name, modifier];\n        }));\n      } else if (typeof value === 'object') {\n        modifiers = new Map(Object.entries(value));\n      } else {\n        throw new TypeError('modifiers should be a Map, array, or an Object containing Modifiers');\n      }\n\n      if (modifiers.size && _toConsumableArray(modifiers.entries()).some(function (entry) {\n        return !(entry[1] instanceof Modifier);\n      })) {\n        throw new TypeError('modifiers must only contain Modifier instances');\n      }\n\n      this[modifiersSymbol$2] = modifiers; // loop through each modifier and ensure that those that require it have compare points\n      // @todo find a better way of defining compare point on modifiers that don't have them\n\n      /* eslint-disable no-param-reassign */\n\n      this[modifiersSymbol$2].forEach(function (modifier) {\n        if (modifier instanceof ExplodeModifier && !modifier.comparePoint) {\n          modifier.comparePoint = new ComparePoint('=', _this12.max);\n        } else if (modifier instanceof ReRollModifier && !modifier.comparePoint) {\n          modifier.comparePoint = new ComparePoint('=', _this12.min);\n        }\n      });\n      /* eslint-enable */\n    }\n    /**\n     * The maximum value that can be rolled on the die, excluding modifiers.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this[maxSymbol$1];\n    }\n    /**\n     * The minimum value that can be rolled on the die, excluding modifiers.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this[minSymbol$1];\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the die.\n     *\n     * @returns {string} 'standard'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'standard';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The dice notation. e.g. `4d6!`.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      var notation = \"\".concat(this.qty, \"d\").concat(this.sides);\n\n      if (this.modifiers && this.modifiers.size) {\n        notation += _toConsumableArray(this.modifiers.values()).reduce(function (acc, modifier) {\n          return acc + modifier.notation;\n        }, '');\n      }\n\n      return notation;\n    }\n    /**\n     * The number of dice that should be rolled.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"qty\",\n    get: function get() {\n      return this[qtySymbol$1];\n    }\n    /**\n     * The number of sides the die has.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"sides\",\n    get: function get() {\n      return this[sidesSymbol];\n    }\n    /**\n     * Roll the dice for the specified quantity and apply any modifiers.\n     *\n     * @returns {RollResults} The result of the roll\n     */\n\n  }, {\n    key: \"roll\",\n    value: function roll() {\n      var _this13 = this;\n\n      // create a result object to hold the rolls\n      var rollResult = new RollResults(); // loop for the quantity and roll the die\n\n      for (var i = 0; i < this.qty; i++) {\n        // add the rolls to the list\n        rollResult.addRoll(this.rollOnce());\n      } // loop through each modifier and carry out its actions\n\n\n      (this.modifiers || []).forEach(function (modifier) {\n        modifier.run(rollResult, _this13);\n      });\n      return rollResult;\n    }\n    /**\n     * Roll a single die and return the value.\n     *\n     * @returns {RollResult} The value rolled\n     */\n\n  }, {\n    key: \"rollOnce\",\n    value: function rollOnce() {\n      return new RollResult(generator.integer(this.min, this.max));\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  average: number,\n     *  min: number,\n     *  max: number,\n     *  notation: string,\n     *  qty: number,\n     *  name: string,\n     *  sides: number,\n     *  modifiers: (Map<string, Modifier>|null),\n     *  type: string\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var average = this.average,\n          max = this.max,\n          min = this.min,\n          modifiers = this.modifiers,\n          name = this.name,\n          notation = this.notation,\n          qty = this.qty,\n          sides = this.sides;\n      return {\n        average: average,\n        max: max,\n        min: min,\n        modifiers: modifiers,\n        name: name,\n        notation: notation,\n        qty: qty,\n        sides: sides,\n        type: 'die'\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @see {@link StandardDice#notation}\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.notation;\n    }\n  }]);\n\n  return StandardDice;\n}();\n/**\n * Represents a Fudge / Fate type die.\n *\n * @extends StandardDice\n */\n\n\nvar FudgeDice = /*#__PURE__*/function (_StandardDice) {\n  _inherits(FudgeDice, _StandardDice);\n\n  var _super9 = _createSuper(FudgeDice);\n\n  /**\n   * Create a `FudgeDice` instance.\n   *\n   * @param {number} [nonBlanks=2] The number of sides each symbol should cover (`1` or `2`)\n   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)\n   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die\n   *\n   * @throws {RangeError} nonBlanks must be 1 or 2\n   * @throws {TypeError} modifiers must be valid\n   */\n  function FudgeDice() {\n    var nonBlanks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    var qty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var modifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, FudgeDice);\n\n    var numNonBlanks = nonBlanks;\n\n    if (!numNonBlanks && numNonBlanks !== 0) {\n      numNonBlanks = 2;\n    } else if (numNonBlanks !== 1 && numNonBlanks !== 2) {\n      throw new RangeError('nonBlanks must be 1 or 2');\n    }\n\n    return _super9.call(this, numNonBlanks, qty, modifiers, -1, 1);\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the die.\n   *\n   * @returns {string} 'fudge'\n   */\n\n\n  _createClass(FudgeDice, [{\n    key: \"name\",\n    get: function get() {\n      return 'fudge';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The number of sides that each symbol (+, -) covers.\n     *\n     * @returns {number} `1` or `2`\n     */\n\n  }, {\n    key: \"nonBlanks\",\n    get: function get() {\n      return _get(_getPrototypeOf(FudgeDice.prototype), \"sides\", this);\n    }\n    /**\n     * The number of sides the die has.\n     *\n     * @returns {string} 'F.2' or 'F.1'\n     */\n\n  }, {\n    key: \"sides\",\n    get: function get() {\n      return \"F.\".concat(this.nonBlanks);\n    }\n    /**\n     * Roll a single die and return the value.\n     *\n     * @returns {RollResult} The value rolled\n     */\n\n  }, {\n    key: \"rollOnce\",\n    value: function rollOnce() {\n      var total = 0;\n\n      if (this.nonBlanks === 2) {\n        // default fudge (2 of each non-blank) = 1d3 - 2\n        total = generator.integer(1, 3) - 2;\n      } else if (this.nonBlanks === 1) {\n        // only 1 of each non-blank\n        // on 1d6 a roll of 1 = -1, 6 = +1, others = 0\n        var num = generator.integer(1, 6);\n\n        if (num === 1) {\n          total = -1;\n        } else if (num === 6) {\n          total = 1;\n        }\n      }\n\n      return new RollResult(total);\n    }\n  }]);\n\n  return FudgeDice;\n}(StandardDice);\n/**\n * Represents a percentile die.\n *\n * @extends StandardDice\n */\n\n\nvar PercentileDice = /*#__PURE__*/function (_StandardDice2) {\n  _inherits(PercentileDice, _StandardDice2);\n\n  var _super10 = _createSuper(PercentileDice);\n\n  /**\n   * Create a `PercentileDice` instance.\n   *\n   * @param {number} [qty=1] The number of dice to roll (e.g. `4`)\n   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers] The modifiers that affect the die\n   * @param {boolean} [sidesAsNumber=false] Whether to show the sides as `%` (default) or `100`\n   *\n   * @throws {TypeError} qty must be a positive integer, and modifiers must be valid\n   */\n  function PercentileDice() {\n    var _this14;\n\n    var qty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var sidesAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, PercentileDice);\n\n    _this14 = _super10.call(this, 100, qty, modifiers);\n    _this14.sidesAsNumber = !!sidesAsNumber;\n    return _this14;\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the die.\n   *\n   * @returns {string} 'percentile'\n   */\n\n\n  _createClass(PercentileDice, [{\n    key: \"name\",\n    get: function get() {\n      return 'percentile';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The number of sides the die has\n     *\n     * @returns {number|string} `%` if `sidesAsNumber == false`, or `100` otherwise\n     */\n\n  }, {\n    key: \"sides\",\n    get: function get() {\n      return this.sidesAsNumber ? _get(_getPrototypeOf(PercentileDice.prototype), \"sides\", this) : '%';\n    }\n  }]);\n\n  return PercentileDice;\n}(StandardDice);\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  FudgeDice: FudgeDice,\n  PercentileDice: PercentileDice,\n  StandardDice: StandardDice\n});\n/**\n * A `CriticalFailureModifier` modifier flags values that match a comparison.\n *\n * Unlike most other modifiers, it doesn't affect the roll value, it simply \"flags\" matching rolls.\n *\n * @see {@link CriticalSuccessModifier} for the opposite of this modifier\n *\n * @extends ComparisonModifier\n */\n\nvar CriticalFailureModifier = /*#__PURE__*/function (_ComparisonModifier3) {\n  _inherits(CriticalFailureModifier, _ComparisonModifier3);\n\n  var _super11 = _createSuper(CriticalFailureModifier);\n\n  /**\n   * Create a `CriticalFailureModifier` instance.\n   *\n   * @param {ComparePoint} [comparePoint] The comparison object\n   *\n   * @throws {TypeError} comparePoint must be a `ComparePoint` object\n   */\n  function CriticalFailureModifier(comparePoint) {\n    var _this15;\n\n    _classCallCheck(this, CriticalFailureModifier);\n\n    _this15 = _super11.call(this, comparePoint); // set the modifier's sort order\n\n    _this15.order = 9;\n    return _this15;\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the modifier.\n   *\n   * @returns {string} 'critical-failure'\n   */\n\n\n  _createClass(CriticalFailureModifier, [{\n    key: \"name\",\n    get: function get() {\n      return 'critical-failure';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"cf\".concat(_get(_getPrototypeOf(CriticalFailureModifier.prototype), \"notation\", this));\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this16 = this;\n\n      results.rolls.forEach(function (roll) {\n        // add the modifier flag\n        if (_this16.isComparePoint(roll.value)) {\n          roll.modifiers.add('critical-failure');\n        }\n\n        return roll;\n      });\n      return results;\n    }\n  }]);\n\n  return CriticalFailureModifier;\n}(ComparisonModifier);\n/**\n * A `CriticalSuccessModifier` modifier flags values that match a comparison.\n *\n * Unlike most other modifiers, it doesn't affect the roll value, it simply \"flags\" matching rolls.\n *\n * @see {@link CriticalFailureModifier} for the opposite of this modifier\n *\n * @extends ComparisonModifier\n */\n\n\nvar CriticalSuccessModifier = /*#__PURE__*/function (_ComparisonModifier4) {\n  _inherits(CriticalSuccessModifier, _ComparisonModifier4);\n\n  var _super12 = _createSuper(CriticalSuccessModifier);\n\n  /**\n   * Create a `CriticalSuccessModifier` instance.\n   *\n   * @param {ComparePoint} comparePoint The comparison object\n   *\n   * @throws {TypeError} comparePoint must be a `ComparePoint` object\n   */\n  function CriticalSuccessModifier(comparePoint) {\n    var _this17;\n\n    _classCallCheck(this, CriticalSuccessModifier);\n\n    _this17 = _super12.call(this, comparePoint); // set the modifier's sort order\n\n    _this17.order = 8;\n    return _this17;\n  }\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * The name of the modifier.\n   *\n   * @returns {string} 'critical-success'\n   */\n\n\n  _createClass(CriticalSuccessModifier, [{\n    key: \"name\",\n    get: function get() {\n      return 'critical-success';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"cs\".concat(_get(_getPrototypeOf(CriticalSuccessModifier.prototype), \"notation\", this));\n    }\n    /**\n     * Runs the modifier on the rolls.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults}\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this18 = this;\n\n      // loop through each roll and see if it's a critical success\n      results.rolls.forEach(function (roll) {\n        // add the modifier flag\n        if (_this18.isComparePoint(roll.value)) {\n          roll.modifiers.add('critical-success');\n        }\n\n        return roll;\n      });\n      return results;\n    }\n  }]);\n\n  return CriticalSuccessModifier;\n}(ComparisonModifier);\n\nvar calculationValueSymbol = Symbol('calculation-value');\nvar isRollGroupSymbol = Symbol('is-roll-group');\nvar modifiersSymbol$1 = Symbol('modifiers');\nvar resultsSymbol = Symbol('results');\nvar useInTotalSymbol = Symbol('use-in-total');\n/**\n * A collection of results and expressions.\n * Usually used to represent the results of a `RollGroup` instance.\n *\n * This can contain `ResultGroup`, `RollResults`, operators, and plain numbers.\n *\n * ::: tip\n * You will probably not need to create your own `ResultGroup` instances, unless you're importing\n * rolls, but `ResultGroup` objects will be returned when rolling group rolls.\n * :::\n *\n * @since 4.5.0\n */\n\nvar ResultGroup = /*#__PURE__*/function () {\n  /**\n   * Create a `ResultGroup` instance.\n   *\n   * @example <caption>Normal roll: `4d6+2d10`</caption>\n   * const results = new ResultGroup([\n   *  new RollResults([3, 5, 4, 2]),\n   *  '+',\n   *  new RollResults([4, 8]),\n   * ]);\n   *\n   * @example <caption>Roll group: `{4d6+2d10/2, 5d6/2d%}`</caption>\n   * const results = new ResultGroup([\n   *  new ResultGroup([\n   *    new RollResults([3, 5, 4, 2]),\n   *    '+',\n   *    new RollResults([4, 8]),\n   *    '/',\n   *    2,\n   *  ]),\n   *  new ResultGroup([\n   *    new RollResults([3, 3, 5, 2, 4]),\n   *    '/',\n   *    new RollResults([87, 46]),\n   *  ]),\n   * ]);\n   *\n   * @param {Array.<ResultGroup|RollResults|number|string>} [results=[]] The results and expressions\n   * @param {string[]|Set<string>} [modifiers=[]] List of modifier names that affect the group\n   * @param {boolean} [isRollGroup=false] Whether the result group represents a roll group or not\n   * @param {boolean} [useInTotal=true] Whether to include the group's value when calculating totals\n   *\n   * @throws {TypeError} Rolls must be an array\n   */\n  function ResultGroup() {\n    var results = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var isRollGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var useInTotal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, ResultGroup);\n\n    this.isRollGroup = isRollGroup;\n    this.modifiers = modifiers;\n    this.results = results;\n    this.useInTotal = useInTotal;\n  }\n  /**\n   * The value to use in calculations.\n   * This may be changed by modifiers.\n   *\n   * @returns {number}\n   */\n\n\n  _createClass(ResultGroup, [{\n    key: \"calculationValue\",\n    get: function get() {\n      return isNumeric(this[calculationValueSymbol]) ? parseFloat(this[calculationValueSymbol]) : this.value;\n    }\n    /**\n     * Set the value to use in calculations.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} value is invalid\n     */\n    ,\n    set: function set(value) {\n      var isValNumeric = isNumeric(value);\n\n      if (value === Infinity) {\n        throw new RangeError('Results calculation value must be a finite number');\n      }\n\n      if (value && !isValNumeric) {\n        throw new TypeError(\"Results calculation value is invalid: \".concat(value));\n      }\n\n      this[calculationValueSymbol] = isValNumeric ? parseFloat(\"\".concat(value)) : null;\n    }\n    /**\n     * Whether the result group represents a roll group or not.\n     *\n     * @returns {boolean} `true` if it is a roll group, `false` otherwise\n     */\n\n  }, {\n    key: \"isRollGroup\",\n    get: function get() {\n      return this[isRollGroupSymbol];\n    }\n    /**\n     * Set whether the result group represents a roll group or not.\n     *\n     * @param {boolean} value\n     */\n    ,\n    set: function set(value) {\n      this[isRollGroupSymbol] = !!value;\n    }\n    /**\n     * The number of results.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.results.length || 0;\n    }\n    /**\n     * The visual flags for the modifiers that affect the group.\n     *\n     * @see {@link ResultGroup#modifiers}\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"modifierFlags\",\n    get: function get() {\n      return getModifierFlags.apply(void 0, _toConsumableArray(this.modifiers));\n    }\n    /**\n     * The modifier names that affect the group.\n     *\n     * @returns {Set<string>}\n     */\n\n  }, {\n    key: \"modifiers\",\n    get: function get() {\n      return this[modifiersSymbol$1];\n    }\n    /**\n     * Set the modifier names that affect the group.\n     *\n     * @example\n     * resultGroup.modifiers = ['drop', 'target-success'];\n     *\n     * @param {string[]|Set<string>} value\n     *\n     * @throws {TypeError} modifiers must be a Set or array of modifier names\n     */\n    ,\n    set: function set(value) {\n      if ((Array.isArray(value) || value instanceof Set) && _toConsumableArray(value).every(function (item) {\n        return typeof item === 'string';\n      })) {\n        this[modifiersSymbol$1] = new Set(_toConsumableArray(value));\n      } else if (!value && value !== 0) {\n        // clear the modifiers\n        this[modifiersSymbol$1] = new Set();\n      } else {\n        throw new TypeError(\"modifiers must be a Set or array of modifier names: \".concat(value));\n      }\n    }\n    /**\n     * List of results.\n     *\n     * @returns {Array.<ResultGroup|RollResults|number|string>}\n     */\n\n  }, {\n    key: \"results\",\n    get: function get() {\n      return _toConsumableArray(this[resultsSymbol]);\n    }\n    /**\n     * Set the results.\n     *\n     * @param {Array.<ResultGroup|RollResults|number|string>} results\n     *\n     * @throws {TypeError} Results must be an array\n     */\n    ,\n    set: function set(results) {\n      var _this19 = this;\n\n      if (!results || !Array.isArray(results)) {\n        // results is not an array\n        throw new TypeError(\"results must be an array: \".concat(results));\n      } // loop through each result and add it to the results list\n\n\n      this[resultsSymbol] = [];\n      results.forEach(function (result) {\n        _this19.addResult(result);\n      });\n    }\n    /**\n     * Whether to use the value in total calculations or not.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"useInTotal\",\n    get: function get() {\n      return !!this[useInTotalSymbol];\n    }\n    /**\n     * Set whether to use the value in total calculations or not.\n     *\n     * @param {boolean} value\n     */\n    ,\n    set: function set(value) {\n      this[useInTotalSymbol] = !!value;\n    }\n    /**\n     * The total value of all the results after modifiers have been applied.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      if (!this.results.length) {\n        return 0;\n      } // loop through the results\n      // - get the values of result objects and add any operators and plain numbers\n      // we'll either end up with a numerical total (If all results are result objects or numbers)\n      // or a string equation (If there are operators)\n\n\n      var value = this.results.reduce(function (v, result) {\n        var val = result;\n\n        if (result instanceof ResultGroup) {\n          val = result.useInTotal ? result.calculationValue : 0;\n        } else if (result instanceof RollResults) {\n          val = result.value;\n        }\n\n        return v + val;\n      }, typeof this.results[0] === 'string' ? '' : 0); // if value is a string that means operators were included, so we need to evaluate the equation\n\n      if (typeof value === 'string') {\n        return evaluate(value);\n      }\n\n      return value;\n    }\n    /**\n     * Add a single result to the list.\n     *\n     * @param {ResultGroup|RollResults|number|string} value\n     *\n     * @throws {TypeError} Value type is invalid\n     */\n\n  }, {\n    key: \"addResult\",\n    value: function addResult(value) {\n      var val;\n\n      if (value instanceof ResultGroup || value instanceof RollResults) {\n        // already a valid result object\n        val = value;\n      } else if (typeof value === 'string' || isNumeric(value)) {\n        // string operator (e.g. '+', '/', etc.), or plain number\n        val = value;\n      } else {\n        throw new TypeError('value must be one of ResultGroup, RollResults, string, or number');\n      } // add the result to the list\n\n\n      this[resultsSymbol].push(val);\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  modifierFlags: string,\n     *  modifiers: string[],\n     *  results: Array<ResultGroup|RollResults|number|string>,\n     *  type: string,\n     *  useInTotal: boolean,\n     *  value: number\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var calculationValue = this.calculationValue,\n          isRollGroup = this.isRollGroup,\n          modifierFlags = this.modifierFlags,\n          modifiers = this.modifiers,\n          results = this.results,\n          useInTotal = this.useInTotal,\n          value = this.value;\n      return {\n        calculationValue: calculationValue,\n        isRollGroup: isRollGroup,\n        modifierFlags: modifierFlags,\n        modifiers: _toConsumableArray(modifiers),\n        results: results,\n        type: 'result-group',\n        useInTotal: useInTotal,\n        value: value\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var output;\n\n      if (this.isRollGroup) {\n        output = \"{\".concat(this.results.join(', '), \"}\");\n      } else {\n        output = this.results.join('');\n      }\n\n      if (this.modifierFlags) {\n        output = \"(\".concat(output, \")\").concat(this.modifierFlags);\n      }\n\n      return output;\n    }\n  }]);\n\n  return ResultGroup;\n}();\n\nvar endSymbol = Symbol('end');\nvar qtySymbol = Symbol('qty');\n/**\n * A `KeepModifier` will \"keep\" dice from a roll, dropping (Remove from total calculations) all\n * others.\n *\n * @see {@link DropModifier} for the opposite of this modifier\n *\n * @extends Modifier\n */\n\nvar KeepModifier = /*#__PURE__*/function (_Modifier2) {\n  _inherits(KeepModifier, _Modifier2);\n\n  var _super13 = _createSuper(KeepModifier);\n\n  /**\n   * Create a `KeepModifier` instance\n   *\n   * @param {string} [end=h] Either `h|l` to keep highest or lowest\n   * @param {number} [qty=1] The amount dice to keep\n   *\n   * @throws {RangeError} End must be one of 'h' or 'l'\n   * @throws {TypeError} qty must be a positive integer\n   */\n  function KeepModifier() {\n    var _this20;\n\n    var end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'h';\n    var qty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, KeepModifier);\n\n    _this20 = _super13.call(this);\n    _this20.end = end;\n    _this20.qty = qty; // set the modifier's sort order\n\n    _this20.order = 5;\n    return _this20;\n  }\n  /**\n   * Which end the rolls should be kept (\"h\" = High, \"l\" = Low).\n   *\n   * @returns {string} 'h' or 'l'\n   */\n\n\n  _createClass(KeepModifier, [{\n    key: \"end\",\n    get: function get() {\n      return this[endSymbol];\n    }\n    /**\n     * Set which end the rolls should be kept (\"h\" = High, \"l\" = Low).\n     *\n     * @param {string} value Either 'h' or 'l'\n     *\n     * @throws {RangeError} End must be one of 'h' or 'l'\n     */\n    ,\n    set: function set(value) {\n      if (value !== 'h' && value !== 'l') {\n        throw new RangeError('End must be \"h\" or \"l\"');\n      }\n\n      this[endSymbol] = value;\n    }\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'keep-l' or 'keep-h'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"keep-\".concat(this.end);\n    }\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"k\".concat(this.end).concat(this.qty);\n    }\n    /**\n     * The quantity of dice that should be kept.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"qty\",\n    get: function get() {\n      return this[qtySymbol];\n    }\n    /**\n     * Set the quantity of dice that should be kept.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} qty must be a positive finite integer\n     */\n    ,\n    set: function set(value) {\n      if (value === Infinity) {\n        throw new RangeError('qty must be a finite number');\n      }\n\n      if (!isNumeric(value) || value < 1) {\n        throw new TypeError('qty must be a positive finite integer');\n      }\n\n      this[qtySymbol] = Math.floor(value);\n    }\n    /**\n     * Determine the start and end (end exclusive) range of rolls to drop.\n     *\n     * @param {RollResults} _results The results to drop from\n     *\n     * @returns {number[]} The min / max range to drop\n     */\n\n  }, {\n    key: \"rangeToDrop\",\n    value: function rangeToDrop(_results) {\n      // we're keeping, so we want to drop all dice that are outside of the qty range\n      if (this.end === 'h') {\n        return [0, _results.length - this.qty];\n      }\n\n      return [this.qty, _results.length];\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {ResultGroup|RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {ResultGroup|RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _rollIndexes$sort$map;\n\n      var modifiedRolls;\n      var rollIndexes;\n\n      if (results instanceof ResultGroup) {\n        modifiedRolls = results.results;\n\n        if (modifiedRolls.length === 1 && modifiedRolls[0] instanceof ResultGroup) {\n          // single sub-roll - get all the dice rolled and their 2d indexes\n          rollIndexes = modifiedRolls[0].results.map(function (result, index) {\n            if (result instanceof RollResults) {\n              return result.rolls.map(function (subResult, subIndex) {\n                return {\n                  value: subResult.value,\n                  index: [index, subIndex]\n                };\n              });\n            }\n\n            return null;\n          }).flat().filter(Boolean);\n        } else {\n          rollIndexes = _toConsumableArray(modifiedRolls) // get a list of objects with roll values and original index\n          .map(function (roll, index) {\n            return {\n              value: roll.value,\n              index: index\n            };\n          });\n        }\n      } else {\n        modifiedRolls = results.rolls;\n        rollIndexes = _toConsumableArray(modifiedRolls) // get a list of objects with roll values and original index\n        .map(function (roll, index) {\n          return {\n            value: roll.value,\n            index: index\n          };\n        });\n      } // determine the indexes that need to be dropped\n\n\n      rollIndexes = (_rollIndexes$sort$map = rollIndexes // sort the list ascending by value\n      .sort(function (a, b) {\n        return a.value - b.value;\n      }).map(function (rollIndex) {\n        return rollIndex.index;\n      }) // get the roll indexes to drop\n      ).slice.apply(_rollIndexes$sort$map, _toConsumableArray(this.rangeToDrop(rollIndexes))); // loop through all of our dice to drop and flag them as such\n\n      rollIndexes.forEach(function (rollIndex) {\n        var roll;\n\n        if (Array.isArray(rollIndex)) {\n          // array of indexes (e.g. single sub-roll in a group roll)\n          roll = modifiedRolls[0].results[rollIndex[0]].rolls[rollIndex[1]];\n        } else {\n          roll = modifiedRolls[rollIndex];\n        }\n\n        roll.modifiers.add('drop');\n        roll.useInTotal = false;\n      });\n      return results;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{notation: string, name: string, type: string, qty: number, end: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var end = this.end,\n          qty = this.qty;\n      return Object.assign(_get(_getPrototypeOf(KeepModifier.prototype), \"toJSON\", this).call(this), {\n        end: end,\n        qty: qty\n      });\n    }\n  }]);\n\n  return KeepModifier;\n}(Modifier);\n/**\n * A `DropModifier` will \"drop\" (Remove from total calculations) dice from a roll.\n *\n * @see {@link KeepModifier} for the opposite of this modifier\n *\n * @extends KeepModifier\n */\n\n\nvar DropModifier = /*#__PURE__*/function (_KeepModifier) {\n  _inherits(DropModifier, _KeepModifier);\n\n  var _super14 = _createSuper(DropModifier);\n\n  /**\n   * Create a `DropModifier` instance.\n   *\n   * @param {string} [end=l] Either `h|l` to drop highest or lowest\n   * @param {number} [qty=1] The amount of dice to drop\n   *\n   * @throws {RangeError} End must be one of 'h' or 'l'\n   * @throws {TypeError} qty must be a positive integer\n   */\n  function DropModifier() {\n    var _this21;\n\n    var end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'l';\n    var qty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, DropModifier);\n\n    _this21 = _super14.call(this, end, qty); // set the modifier's sort order\n\n    _this21.order = 6;\n    return _this21;\n  }\n  /**\n   * The name of the modifier.\n   *\n   * @returns {string} 'drop-l' or 'drop-h'\n   */\n\n\n  _createClass(DropModifier, [{\n    key: \"name\",\n    get: function get() {\n      return \"drop-\".concat(this.end);\n    }\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"d\".concat(this.end).concat(this.qty);\n    }\n    /**\n     * Determine the start and end (end exclusive) range of rolls to drop.\n     *\n     * @param {RollResults} _results The results to drop from\n     *\n     * @returns {number[]} The min / max range to drop\n     */\n\n  }, {\n    key: \"rangeToDrop\",\n    value: function rangeToDrop(_results) {\n      // we're dropping, so we want to drop all dice that are inside of the qty range\n      if (this.end === 'h') {\n        return [_results.length - this.qty, _results.length];\n      }\n\n      return [0, this.qty];\n    }\n  }]);\n\n  return DropModifier;\n}(KeepModifier);\n\nvar maxSymbol = Symbol('max');\n/**\n * A `MaxModifier` causes die rolls over a maximum value to be treated as the maximum value.\n *\n * @since 4.3.0\n *\n * @see {@link MinModifier} for the opposite of this modifier\n *\n * @extends {Modifier}\n */\n\nvar MaxModifier = /*#__PURE__*/function (_Modifier3) {\n  _inherits(MaxModifier, _Modifier3);\n\n  var _super15 = _createSuper(MaxModifier);\n\n  /**\n   * Create a `MaxModifier` instance.\n   *\n   * @param {number} max The maximum value\n   *\n   * @throws {TypeError} max must be a number\n   */\n  function MaxModifier(max) {\n    var _this22;\n\n    _classCallCheck(this, MaxModifier);\n\n    _this22 = _super15.call(this);\n    _this22.max = max; // set the modifier's sort order\n\n    _this22.order = 2;\n    return _this22;\n  }\n  /**\n   * The maximum value.\n   *\n   * @returns {Number}\n   */\n\n\n  _createClass(MaxModifier, [{\n    key: \"max\",\n    get: function get() {\n      return this[maxSymbol];\n    }\n    /**\n     * Set the maximum value.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} max must be a number\n     */\n    ,\n    set: function set(value) {\n      if (!isNumeric(value)) {\n        throw new TypeError('max must be a number');\n      }\n\n      this[maxSymbol] = parseFloat(\"\".concat(value));\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'max'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'max';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"max\".concat(this.max);\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this23 = this;\n\n      var parsedResults = results;\n      parsedResults.rolls = results.rolls.map(function (roll) {\n        var parsedRoll = roll;\n\n        if (roll.value > _this23.max) {\n          parsedRoll.value = _this23.max;\n          parsedRoll.modifiers.add('max');\n        }\n\n        return parsedRoll;\n      });\n      return parsedResults;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{notation: string, name: string, type: string, max: Number}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var max = this.max;\n      return Object.assign(_get(_getPrototypeOf(MaxModifier.prototype), \"toJSON\", this).call(this), {\n        max: max\n      });\n    }\n  }]);\n\n  return MaxModifier;\n}(Modifier);\n\nvar minSymbol = Symbol('min');\n/**\n * A `MinModifier` causes die rolls under a minimum value to be treated as the minimum value.\n *\n * @since 4.3.0\n *\n * @see {@link MaxModifier} for the opposite of this modifier\n *\n * @extends {Modifier}\n */\n\nvar MinModifier = /*#__PURE__*/function (_Modifier4) {\n  _inherits(MinModifier, _Modifier4);\n\n  var _super16 = _createSuper(MinModifier);\n\n  /**\n   * Create a `MinModifier` instance.\n   *\n   * @param {number} min The minimum value\n   *\n   * @throws {TypeError} min must be a number\n   */\n  function MinModifier(min) {\n    var _this24;\n\n    _classCallCheck(this, MinModifier);\n\n    _this24 = _super16.call(this);\n    _this24.min = min; // set the modifier's sort order\n\n    _this24.order = 1;\n    return _this24;\n  }\n  /**\n   * The minimum value.\n   *\n   * @returns {Number}\n   */\n\n\n  _createClass(MinModifier, [{\n    key: \"min\",\n    get: function get() {\n      return this[minSymbol];\n    }\n    /**\n     * Set the minimum value.\n     *\n     * @param {number} value\n     *\n     * @throws {TypeError} min must be a number\n     */\n    ,\n    set: function set(value) {\n      if (!isNumeric(value)) {\n        throw new TypeError('min must be a number');\n      }\n\n      this[minSymbol] = parseFloat(\"\".concat(value));\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'min'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'min';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"min\".concat(this.min);\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this25 = this;\n\n      var parsedResults = results;\n      parsedResults.rolls = results.rolls.map(function (roll) {\n        var parsedRoll = roll;\n\n        if (roll.value < _this25.min) {\n          parsedRoll.value = _this25.min;\n          parsedRoll.modifiers.add('min');\n        }\n\n        return parsedRoll;\n      });\n      return parsedResults;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{notation: string, name: string, type: string, min: Number}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var min = this.min;\n      return Object.assign(_get(_getPrototypeOf(MinModifier.prototype), \"toJSON\", this).call(this), {\n        min: min\n      });\n    }\n  }]);\n\n  return MinModifier;\n}(Modifier);\n\nvar directionSymbol = Symbol('direction');\n/**\n * A `SortingModifier` sorts roll results by their value, either ascending or descending.\n *\n * @extends ComparisonModifier\n */\n\nvar SortingModifier = /*#__PURE__*/function (_Modifier5) {\n  _inherits(SortingModifier, _Modifier5);\n\n  var _super17 = _createSuper(SortingModifier);\n\n  /**\n   * Create a `SortingModifier` instance.\n   *\n   * @param {string} [direction=a] The direction to sort in; 'a' (Ascending) or 'd' (Descending)\n   *\n   * @throws {RangeError} Direction must be 'a' or 'd'\n   */\n  function SortingModifier() {\n    var _this26;\n\n    var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'a';\n\n    _classCallCheck(this, SortingModifier);\n\n    _this26 = _super17.call(this);\n    _this26.direction = direction; // set the modifier's sort order\n\n    _this26.order = 10;\n    return _this26;\n  }\n  /**\n   * The sort direction.\n   *\n   * @returns {string} Either 'a' or 'd'\n   */\n\n\n  _createClass(SortingModifier, [{\n    key: \"direction\",\n    get: function get() {\n      return this[directionSymbol];\n    }\n    /**\n     * Set the sort direction.\n     *\n     * @param {string} value Either 'a' (Ascending) or 'd' (Descending)\n     *\n     * @throws {RangeError} Direction must be 'a' or 'd'\n     */\n    ,\n    set: function set(value) {\n      if (value !== 'a' && value !== 'd') {\n        throw new RangeError('Direction must be \"a\" (Ascending) or \"d\" (Descending)');\n      }\n\n      this[directionSymbol] = value;\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'sorting'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'sorting';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"s\".concat(this.direction);\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this27 = this;\n\n      var resultsKey;\n\n      if (results instanceof ResultGroup) {\n        resultsKey = 'results';\n      } else {\n        resultsKey = 'rolls';\n      }\n      /* eslint-disable no-param-reassign */\n\n\n      results[resultsKey] = results[resultsKey].sort(function (a, b) {\n        if (_this27.direction === 'd') {\n          return b.value - a.value;\n        }\n\n        return a.value - b.value;\n      }); // if result group, we also need to sort any die rolls in th sub-rolls\n\n      if (results instanceof ResultGroup) {\n        results[resultsKey] = results[resultsKey].map(function (subRoll) {\n          if (subRoll instanceof ResultGroup || subRoll instanceof RollResults) {\n            return _this27.run(subRoll, _context);\n          }\n\n          return subRoll;\n        });\n      }\n      /* eslint-enable */\n\n\n      return results;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{notation: string, name: string, type: string, direction: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var direction = this.direction;\n      return Object.assign(_get(_getPrototypeOf(SortingModifier.prototype), \"toJSON\", this).call(this), {\n        direction: direction\n      });\n    }\n  }]);\n\n  return SortingModifier;\n}(Modifier);\n\nvar failureCPSymbol = Symbol('failure-cp');\n/**\n * A `TargetModifier` determines whether rolls are classed as a success, failure, or neutral.\n *\n * This modifies the roll values, depending on the state;\n *\n * success = `1`, failure = `-1`, neutral = `0`.\n *\n * @extends ComparisonModifier\n */\n\nvar TargetModifier = /*#__PURE__*/function (_ComparisonModifier5) {\n  _inherits(TargetModifier, _ComparisonModifier5);\n\n  var _super18 = _createSuper(TargetModifier);\n\n  /**\n   * Create a `TargetModifier` instance.\n   *\n   * @param {ComparePoint} successCP The success comparison object\n   * @param {ComparePoint} [failureCP=null] The failure comparison object\n   *\n   * @throws {TypeError} failure comparePoint must be instance of ComparePoint or null\n   */\n  function TargetModifier(successCP) {\n    var _this28;\n\n    var failureCP = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, TargetModifier);\n\n    _this28 = _super18.call(this, successCP); // set the failure compare point\n\n    _this28.failureComparePoint = failureCP; // set the modifier's sort order\n\n    _this28.order = 7;\n    return _this28;\n  }\n  /**\n   * The failure compare point for the modifier\n   *\n   * @returns {ComparePoint|null}\n   */\n\n\n  _createClass(TargetModifier, [{\n    key: \"failureComparePoint\",\n    get: function get() {\n      return this[failureCPSymbol];\n    }\n    /**\n     * Set the failure compare point\n     *\n     * @param {ComparePoint|null} comparePoint\n     *\n     * @throws {TypeError} failure comparePoint must be instance of ComparePoint or null\n     */\n    ,\n    set: function set(comparePoint) {\n      if (comparePoint && !(comparePoint instanceof ComparePoint)) {\n        throw new TypeError('failure comparePoint must be instance of ComparePoint or null');\n      }\n\n      this[failureCPSymbol] = comparePoint || null;\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * The name of the modifier.\n     *\n     * @returns {string} 'target'\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'target';\n    }\n    /* eslint-enable class-methods-use-this */\n\n    /**\n     * The modifier's notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return \"\".concat(_get(_getPrototypeOf(TargetModifier.prototype), \"notation\", this)).concat(this.failureComparePoint ? \"f\".concat(this.failureComparePoint) : '');\n    }\n    /**\n     * The success compare point for the modifier\n     *\n     * @returns {ComparePoint}\n     */\n\n  }, {\n    key: \"successComparePoint\",\n    get: function get() {\n      return this.comparePoint;\n    }\n    /**\n     * Set the success compare point for the modifier\n     *\n     * @param {ComparePoint} value\n     */\n    ,\n    set: function set(value) {\n      _set(_getPrototypeOf(TargetModifier.prototype), \"comparePoint\", value, this, true);\n    }\n    /**\n     * Check if the value is a success/failure/neither and return the corresponding state value.\n     *\n     * @param {number} value The number to compare against\n     *\n     * @returns {number} success = `1`, failure = `-1`, neutral = `0`\n     */\n\n  }, {\n    key: \"getStateValue\",\n    value: function getStateValue(value) {\n      if (this.isSuccess(value)) {\n        return 1;\n      }\n\n      if (this.isFailure(value)) {\n        return -1;\n      }\n\n      return 0;\n    }\n    /**\n     * Check if the `value` matches the failure compare point.\n     *\n     * A response of `false` does _NOT_ indicate a success.\n     * A value is a success _ONLY_ if it passes the success compare point.\n     * A value could be neither a failure or a success.\n     *\n     * @param {number} value The number to compare against\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isFailure\",\n    value: function isFailure(value) {\n      return this.failureComparePoint ? this.failureComparePoint.isMatch(value) : false;\n    }\n    /**\n     * Check if the `value` is neither a success or a failure.\n     *\n     * @param {number} value The number to compare against\n     *\n     * @returns {boolean} `true` if the value doesn't match the success and failure compare points\n     */\n\n  }, {\n    key: \"isNeutral\",\n    value: function isNeutral(value) {\n      return !this.isSuccess(value) && !this.isFailure(value);\n    }\n    /**\n     * Check if the `value` matches the success compare point.\n     *\n     * A response of `false` does _NOT_ indicate a failure.\n     * A value is a failure _ONLY_ if it passes the failure compare point.\n     * A value could be neither a failure or a success.\n     *\n     * @param {number} value The number to compare against\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSuccess\",\n    value: function isSuccess(value) {\n      return this.isComparePoint(value);\n    }\n    /**\n     * Run the modifier on the results.\n     *\n     * @param {RollResults} results The results to run the modifier against\n     * @param {StandardDice|RollGroup} _context The object that the modifier is attached to\n     *\n     * @returns {RollResults} The modified results\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(results, _context) {\n      var _this29 = this;\n\n      var rolls;\n\n      if (results instanceof ResultGroup) {\n        rolls = results.results;\n      } else {\n        rolls = results.rolls;\n      } // loop through each roll and see if it matches the target\n\n\n      rolls.forEach(function (roll) {\n        // add the modifier flag\n        if (_this29.isSuccess(roll.value)) {\n          roll.modifiers.add('target-success');\n        } else if (_this29.isFailure(roll.value)) {\n          roll.modifiers.add('target-failure');\n        } // set the value to the success state value\n        // eslint-disable-next-line no-param-reassign\n\n\n        roll.calculationValue = _this29.getStateValue(roll.value);\n      });\n      return results;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  notation: string,\n     *  name: string,\n     *  type: string,\n     *  comparePoint: (ComparePoint|undefined),\n     *  failureComparePoint: (ComparePoint|null),\n     *  successComparePoint: ComparePoint\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var failureComparePoint = this.failureComparePoint,\n          successComparePoint = this.successComparePoint; // get the inherited object, but remove the comparePoint property\n\n      var result = _get(_getPrototypeOf(TargetModifier.prototype), \"toJSON\", this).call(this);\n\n      delete result.comparePoint;\n      return Object.assign(result, {\n        failureComparePoint: failureComparePoint,\n        successComparePoint: successComparePoint\n      });\n    }\n  }]);\n\n  return TargetModifier;\n}(ComparisonModifier);\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ComparisonModifier: ComparisonModifier,\n  CriticalFailureModifier: CriticalFailureModifier,\n  CriticalSuccessModifier: CriticalSuccessModifier,\n  DropModifier: DropModifier,\n  ExplodeModifier: ExplodeModifier,\n  KeepModifier: KeepModifier,\n  MaxModifier: MaxModifier,\n  MinModifier: MinModifier,\n  Modifier: Modifier,\n  ReRollModifier: ReRollModifier,\n  SortingModifier: SortingModifier,\n  TargetModifier: TargetModifier\n});\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ResultGroup: ResultGroup,\n  RollResult: RollResult,\n  RollResults: RollResults\n});\n/**\n * Check if the value is a valid base64 encoded string.\n *\n * @param {string} val\n *\n * @returns {boolean} `true` if it is valid base64 encoded, `false` otherwise\n */\n\nvar isBase64 = function isBase64(val) {\n  try {\n    return !!(val && btoa(atob(val)) === val);\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the value is a valid JSON encoded string.\n *\n * @param {string} val\n *\n * @returns {boolean} `true` if the value is valid JSON, `false` otherwise\n */\n\n\nvar isJson = function isJson(val) {\n  try {\n    var parsed = val ? JSON.parse(val) : false;\n    return !!(parsed && typeof parsed === 'object');\n  } catch (e) {\n    return false;\n  }\n};\n\nvar modifiersSymbol = Symbol('modifiers');\nvar expressionsSymbol$1 = Symbol('expressions');\n/**\n * A `RollGroup` is a group of one or more \"sub-rolls\".\n *\n * A sub-roll is just simple roll notation (e.g. `4d6`, `2d10*3`, `5/10d20`)\n *\n * @example <caption>`{4d6+4, 2d%/5}k1`</caption>\n * const expressions = [\n *   [\n *     new StandardDice(6, 4),\n *     '+',\n *     4,\n *   ],\n *   [\n *     new PercentileDice(2),\n *     '/',\n *     5,\n *   ],\n * ];\n *\n * const modifiers = [\n *   new KeepModifier(),\n * ];\n *\n * const group = new RollGroup(expressions, modifiers);\n *\n * @since 4.5.0\n */\n\nvar RollGroup = /*#__PURE__*/function () {\n  /**\n   * Create a `RollGroup` instance.\n   *\n   * @param {Array.<Array.<StandardDice|string|number>>} [expressions=[]] List of sub-rolls\n   * @param {Map<string, Modifier>|Modifier[]|{}|null} [modifiers=[]] The modifiers that affect the\n   * group\n   */\n  function RollGroup() {\n    var expressions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, RollGroup);\n\n    this.expressions = expressions;\n    this.modifiers = modifiers;\n  }\n  /**\n   * The sub-roll expressions in the group.\n   *\n   * @returns {Array.<Array.<StandardDice|string|number>>}\n   */\n\n\n  _createClass(RollGroup, [{\n    key: \"expressions\",\n    get: function get() {\n      return _toConsumableArray(this[expressionsSymbol$1] || []);\n    }\n    /**\n     * Set the sub-roll expressions in the group.\n     *\n     * @param {Array.<Array.<StandardDice|string|number>>} expressions\n     *\n     * @throws {TypeError} Expressions must be an array of arrays\n     * @throws {TypeError} Sub expressions cannot be empty\n     * @throws {TypeError} Sub expression items must be Dice, numbers, or strings\n     */\n    ,\n    set: function set(expressions) {\n      var _this30 = this;\n\n      if (!expressions) {\n        throw new RequiredArgumentError('expressions');\n      }\n\n      if (!Array.isArray(expressions)) {\n        throw new TypeError(\"expressions must be an array: \".concat(expressions));\n      } // loop through each expression and add it to the list\n\n\n      this[expressionsSymbol$1] = [];\n      expressions.forEach(function (expression) {\n        if (!expression || !Array.isArray(expression)) {\n          throw new TypeError(\"Expressions must be an array of arrays: \".concat(expressions));\n        }\n\n        if (expression.length === 0) {\n          throw new TypeError(\"Sub expressions cannot be empty: \".concat(expressions));\n        }\n\n        if (!expression.every(function (value) {\n          return value instanceof StandardDice || typeof value === 'string' || typeof value === 'number';\n        })) {\n          throw new TypeError('Sub expression items must be Dice, numbers, or strings');\n        }\n\n        _this30[expressionsSymbol$1].push(expression);\n      });\n    }\n    /**\n     * The modifiers that affect the object.\n     *\n     * @returns {Map<string, Modifier>|null}\n     */\n\n  }, {\n    key: \"modifiers\",\n    get: function get() {\n      if (this[modifiersSymbol]) {\n        // ensure modifiers are ordered correctly\n        return new Map(_toConsumableArray(this[modifiersSymbol]).sort(function (a, b) {\n          return a[1].order - b[1].order;\n        }));\n      }\n\n      return null;\n    }\n    /**\n     * Set the modifiers that affect this group.\n     *\n     * @param {Map<string, Modifier>|Modifier[]|{}|null} value\n     *\n     * @throws {TypeError} Modifiers should be a Map, array of Modifiers, or an Object\n     */\n    ,\n    set: function set(value) {\n      var modifiers;\n\n      if (value instanceof Map) {\n        modifiers = value;\n      } else if (Array.isArray(value)) {\n        // loop through and get the modifier name of each item and use it as the map key\n        modifiers = new Map(value.map(function (modifier) {\n          return [modifier.name, modifier];\n        }));\n      } else if (typeof value === 'object') {\n        modifiers = new Map(Object.entries(value));\n      } else {\n        throw new TypeError('modifiers should be a Map, array, or an Object containing Modifiers');\n      }\n\n      if (modifiers.size && _toConsumableArray(modifiers.entries()).some(function (entry) {\n        return !(entry[1] instanceof Modifier);\n      })) {\n        throw new TypeError('modifiers must only contain Modifier instances');\n      }\n\n      this[modifiersSymbol] = modifiers;\n    }\n    /**\n     * The group notation. e.g. `{4d6, 2d10+3}k1`.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      var notation = this.expressions.map(function (expression) {\n        return expression.reduce(function (acc, e) {\n          return acc + e;\n        }, '');\n      }).join(', ');\n      notation = \"{\".concat(notation, \"}\");\n\n      if (this.modifiers && this.modifiers.size) {\n        notation += _toConsumableArray(this.modifiers.values()).reduce(function (acc, modifier) {\n          return acc + modifier.notation;\n        }, '');\n      }\n\n      return notation;\n    }\n    /**\n     * Run the sub-roll expressions for the group.\n     *\n     * @example <caption>`{4d6+4/1d6, 2d10/3}k1`</caption>\n     * ResultGroup {\n     *   results: [\n     *     // sub-roll 1 - 4d6+4/1d6\n     *     ResultGroup {\n     *       results: [\n     *         RollResults {\n     *           rolls: [\n     *             RollResult {\n     *               value: 2\n     *             },\n     *             RollResult {\n     *               value: 5\n     *             },\n     *             RollResult {\n     *               value: 4\n     *             },\n     *             RollResult {\n     *               value: 1\n     *             }\n     *           ]\n     *         },\n     *         '+',\n     *         4,\n     *         '/',\n     *         RollResults {\n     *           rolls: [\n     *             RollResult {\n     *               value: 4\n     *             }\n     *           ]\n     *         }\n     *       ]\n     *     },\n     *     // sub-roll 2 - 2d10/3\n     *     ResultGroup {\n     *       results: [\n     *         RollResults {\n     *           rolls: [\n     *             RollResults {\n     *               4\n     *             },\n     *             RollResults {\n     *               9\n     *             }\n     *           ]\n     *         },\n     *         '/',\n     *         3\n     *       ]\n     *     }\n     *   ]\n     * }\n     *\n     * @returns {ResultGroup} The results of the sub-rolls\n     */\n\n  }, {\n    key: \"roll\",\n    value: function roll() {\n      var _this31 = this;\n\n      // loop through each sub-roll expression and roll it\n      // adding the results to a single RollResults object\n      var rollResults = new ResultGroup(this.expressions.map(function (subRoll) {\n        var result = subRoll.map(function (expression) {\n          if (expression instanceof StandardDice) {\n            // roll the object and return the value\n            return expression.roll();\n          }\n\n          return expression;\n        });\n        return new ResultGroup(result);\n      })); // flag it as roll group results\n\n      rollResults.isRollGroup = true; // loop through each modifier and carry out its actions\n\n      (this.modifiers || []).forEach(function (modifier) {\n        modifier.run(rollResults, _this31);\n      });\n      return rollResults;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  notation: string,\n     *  modifiers: (Map<string, Modifier>|null),\n     *  type: string,\n     *  expressions: Array.<Array.<StandardDice|string|number>>\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var modifiers = this.modifiers,\n          notation = this.notation,\n          expressions = this.expressions;\n      return {\n        expressions: expressions,\n        modifiers: modifiers,\n        notation: notation,\n        type: 'group'\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @see {@link RollGroup#notation}\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.notation;\n    }\n  }]);\n\n  return RollGroup;\n}(); // Generated by Peggy 1.2.0.\n\n\nfunction peg$subclass(child, parent) {\n  function C() {\n    this.constructor = child;\n  }\n\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n\n  if (str.length > targetLength) {\n    return str;\n  }\n\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function (sources) {\n  var str = \"Error: \" + this.message;\n\n  if (this.location) {\n    var src = null;\n    var k;\n\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n\n    var s = this.location.start;\n    var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", s.line.toString().length);\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1) + peg$padEnd(\"\", last - s.column, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n\n  return str;\n};\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    class: function _class(expectation) {\n      var escapedParts = expectation.parts.map(function (part) {\n        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n      });\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any() {\n      return \"any character\";\n    },\n    end: function end() {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n      return \"\\\\x0\" + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return \"\\\\x\" + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n  var peg$startRuleFunctions = {\n    Main: peg$parseMain\n  };\n  var peg$startRuleFunction = peg$parseMain;\n  var peg$c0 = \"{\";\n  var peg$c1 = \",\";\n  var peg$c2 = \"}\";\n  var peg$c3 = \"d\";\n  var peg$c4 = \"d%\";\n  var peg$c5 = \"dF\";\n  var peg$c6 = \".\";\n  var peg$c7 = \"!\";\n  var peg$c8 = \"p\";\n  var peg$c9 = \"k\";\n  var peg$c10 = \"max\";\n  var peg$c11 = \"min\";\n  var peg$c12 = \"r\";\n  var peg$c13 = \"o\";\n  var peg$c14 = \"cs\";\n  var peg$c15 = \"cf\";\n  var peg$c16 = \"s\";\n  var peg$c17 = \"a\";\n  var peg$c18 = \"f\";\n  var peg$c19 = \"!=\";\n  var peg$c20 = \"<=\";\n  var peg$c21 = \">=\";\n  var peg$c22 = \"=\";\n  var peg$c23 = \"<>\";\n  var peg$c24 = \">\";\n  var peg$c25 = \"<\";\n  var peg$c26 = \"(\";\n  var peg$c27 = \")\";\n  var peg$c28 = \"abs\";\n  var peg$c29 = \"ceil\";\n  var peg$c30 = \"cos\";\n  var peg$c31 = \"exp\";\n  var peg$c32 = \"floor\";\n  var peg$c33 = \"log\";\n  var peg$c34 = \"round\";\n  var peg$c35 = \"sign\";\n  var peg$c36 = \"sin\";\n  var peg$c37 = \"sqrt\";\n  var peg$c38 = \"tan\";\n  var peg$c39 = \"pow\";\n  var peg$c40 = \"-\";\n  var peg$c41 = \"**\";\n  var peg$c42 = \"*\";\n  var peg$c43 = \"^\";\n  var peg$c44 = \"%\";\n  var peg$c45 = \"/\";\n  var peg$c46 = \"+\";\n  var peg$r0 = /^[12]/;\n  var peg$r1 = /^[lh]/;\n  var peg$r2 = /^[.]/;\n  var peg$r3 = /^[1-9]/;\n  var peg$r4 = /^[0-9]/;\n  var peg$r5 = /^[ \\t\\n\\r]/;\n  var peg$e0 = peg$literalExpectation(\"{\", false);\n  var peg$e1 = peg$literalExpectation(\",\", false);\n  var peg$e2 = peg$literalExpectation(\"}\", false);\n  var peg$e3 = peg$literalExpectation(\"d\", false);\n  var peg$e4 = peg$literalExpectation(\"d%\", false);\n  var peg$e5 = peg$literalExpectation(\"dF\", false);\n  var peg$e6 = peg$literalExpectation(\".\", false);\n  var peg$e7 = peg$classExpectation([\"1\", \"2\"], false, false);\n  var peg$e8 = peg$literalExpectation(\"!\", false);\n  var peg$e9 = peg$literalExpectation(\"p\", false);\n  var peg$e10 = peg$classExpectation([\"l\", \"h\"], false, false);\n  var peg$e11 = peg$literalExpectation(\"k\", false);\n  var peg$e12 = peg$literalExpectation(\"max\", false);\n  var peg$e13 = peg$literalExpectation(\"min\", false);\n  var peg$e14 = peg$literalExpectation(\"r\", false);\n  var peg$e15 = peg$literalExpectation(\"o\", false);\n  var peg$e16 = peg$literalExpectation(\"cs\", false);\n  var peg$e17 = peg$literalExpectation(\"cf\", false);\n  var peg$e18 = peg$literalExpectation(\"s\", false);\n  var peg$e19 = peg$literalExpectation(\"a\", false);\n  var peg$e20 = peg$literalExpectation(\"f\", false);\n  var peg$e21 = peg$literalExpectation(\"!=\", false);\n  var peg$e22 = peg$literalExpectation(\"<=\", false);\n  var peg$e23 = peg$literalExpectation(\">=\", false);\n  var peg$e24 = peg$literalExpectation(\"=\", false);\n  var peg$e25 = peg$literalExpectation(\"<>\", false);\n  var peg$e26 = peg$literalExpectation(\">\", false);\n  var peg$e27 = peg$literalExpectation(\"<\", false);\n  var peg$e28 = peg$literalExpectation(\"(\", false);\n  var peg$e29 = peg$literalExpectation(\")\", false);\n  var peg$e30 = peg$literalExpectation(\"abs\", false);\n  var peg$e31 = peg$literalExpectation(\"ceil\", false);\n  var peg$e32 = peg$literalExpectation(\"cos\", false);\n  var peg$e33 = peg$literalExpectation(\"exp\", false);\n  var peg$e34 = peg$literalExpectation(\"floor\", false);\n  var peg$e35 = peg$literalExpectation(\"log\", false);\n  var peg$e36 = peg$literalExpectation(\"round\", false);\n  var peg$e37 = peg$literalExpectation(\"sign\", false);\n  var peg$e38 = peg$literalExpectation(\"sin\", false);\n  var peg$e39 = peg$literalExpectation(\"sqrt\", false);\n  var peg$e40 = peg$literalExpectation(\"tan\", false);\n  var peg$e41 = peg$literalExpectation(\"pow\", false);\n  var peg$e42 = peg$literalExpectation(\"-\", false);\n  var peg$e43 = peg$classExpectation([\".\"], false, false);\n  var peg$e44 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$e45 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e46 = peg$literalExpectation(\"**\", false);\n  var peg$e47 = peg$literalExpectation(\"*\", false);\n  var peg$e48 = peg$literalExpectation(\"^\", false);\n  var peg$e49 = peg$literalExpectation(\"%\", false);\n  var peg$e50 = peg$literalExpectation(\"/\", false);\n  var peg$e51 = peg$literalExpectation(\"+\", false);\n  var peg$e52 = peg$otherExpectation(\"whitespace\");\n  var peg$e53 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n\n  var peg$f0 = function peg$f0(expr, exprs, modifiers) {\n    return new RollGroup([expr].concat(_toConsumableArray(exprs.map(function (v) {\n      return v[3];\n    }))), Object.assign.apply(Object, [{}].concat(_toConsumableArray(modifiers.map(function (item) {\n      return _defineProperty({}, item.name, item);\n    })))));\n  };\n\n  var peg$f1 = function peg$f1(die, modifiers) {\n    die.modifiers = Object.assign.apply(Object, [{}].concat(_toConsumableArray(modifiers.map(function (item) {\n      return _defineProperty({}, item.name, item);\n    }))));\n    return die;\n  };\n\n  var peg$f2 = function peg$f2(qty, sides) {\n    return new StandardDice(sides, qty || 1);\n  };\n\n  var peg$f3 = function peg$f3(qty) {\n    return new PercentileDice(qty || 1);\n  };\n\n  var peg$f4 = function peg$f4(qty, sides) {\n    return new FudgeDice(sides ? parseInt(sides[1], 10) : 2, qty || 1);\n  };\n\n  var peg$f5 = function peg$f5(compound, penetrate, comparePoint) {\n    return new ExplodeModifier(comparePoint, !!compound, !!penetrate);\n  };\n\n  var peg$f6 = function peg$f6(successCP, failureCP) {\n    return new TargetModifier(successCP, failureCP);\n  };\n\n  var peg$f7 = function peg$f7(end, qty) {\n    return new DropModifier(end || 'l', qty);\n  };\n\n  var peg$f8 = function peg$f8(end, qty) {\n    return new KeepModifier(end || 'h', qty);\n  };\n\n  var peg$f9 = function peg$f9(max) {\n    return new MaxModifier(max);\n  };\n\n  var peg$f10 = function peg$f10(min) {\n    return new MinModifier(min);\n  };\n\n  var peg$f11 = function peg$f11(once, comparePoint) {\n    return new ReRollModifier(!!once, comparePoint);\n  };\n\n  var peg$f12 = function peg$f12(comparePoint) {\n    return new CriticalSuccessModifier(comparePoint);\n  };\n\n  var peg$f13 = function peg$f13(comparePoint) {\n    return new CriticalFailureModifier(comparePoint);\n  };\n\n  var peg$f14 = function peg$f14(dir) {\n    return new SortingModifier(dir || 'a');\n  };\n\n  var peg$f15 = function peg$f15(comparePoint) {\n    return comparePoint;\n  };\n\n  var peg$f16 = function peg$f16(operator, value) {\n    return new ComparePoint(operator, value);\n  };\n\n  var peg$f17 = function peg$f17(l, expr, r) {\n    return evaluate(text());\n  };\n\n  var peg$f18 = function peg$f18(head, tail) {\n    head = Array.isArray(head) ? head : [head];\n    return [].concat(_toConsumableArray(head), _toConsumableArray(tail.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 4),\n          value = _ref4[1],\n          factor = _ref4[3];\n\n      return [value, factor];\n    }).flat(2)));\n  };\n\n  var peg$f19 = function peg$f19(l, expr, r) {\n    return [l].concat(_toConsumableArray(expr), [r]);\n  };\n\n  var peg$f20 = function peg$f20(func, expr) {\n    return [\"\".concat(func, \"(\")].concat(_toConsumableArray(expr), [')']);\n  };\n\n  var peg$f21 = function peg$f21(func, expr1, expr2) {\n    return [\"\".concat(func, \"(\")].concat(_toConsumableArray(expr1), [','], _toConsumableArray(expr2), [')']);\n  };\n\n  var peg$f22 = function peg$f22() {\n    return parseFloat(text());\n  };\n\n  var peg$f23 = function peg$f23() {\n    return parseInt(text(), 10);\n  };\n\n  var peg$f24 = function peg$f24() {\n    return \"^\";\n  };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    return {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parseMain() {\n    var s0;\n    s0 = peg$parseExpression();\n    return s0;\n  }\n\n  function peg$parseRollGroup() {\n    var s0, s1, s3, s4, s5, s6, s7, s8, s9;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c0;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e0);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$parse_();\n      s3 = peg$parseExpression();\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parse_();\n\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c1;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          s9 = peg$parseExpression();\n\n          if (s9 !== peg$FAILED) {\n            s6 = [s6, s7, s8, s9];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parse_();\n\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c1;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e1);\n            }\n          }\n\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            s9 = peg$parseExpression();\n\n            if (s9 !== peg$FAILED) {\n              s6 = [s6, s7, s8, s9];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n\n        s5 = peg$parse_();\n\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s6 = peg$c2;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n\n        if (s6 !== peg$FAILED) {\n          s7 = [];\n          s8 = peg$parseModifier();\n\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parseModifier();\n          }\n\n          peg$savedPos = s0;\n          s0 = peg$f0(s3, s4, s7);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDice() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseStandardDie();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsePercentileDie();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseFudgeDie();\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseModifier();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseModifier();\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f1(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseStandardDie() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseIntegerOrExpression();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 100) {\n      s2 = peg$c3;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e3);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseIntegerOrExpression();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f2(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsePercentileDie() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parseIntegerOrExpression();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c4) {\n      s2 = peg$c4;\n      peg$currPos += 2;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e4);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s0 = peg$f3(s1);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseFudgeDie() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parseIntegerOrExpression();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c5) {\n      s2 = peg$c5;\n      peg$currPos += 2;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e5);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s4 = peg$c6;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e6);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f4(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseModifier() {\n    var s0;\n    s0 = peg$parseExplodeModifier();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseTargetModifier();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseDropModifier();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKeepModifier();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseReRollModifier();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseCriticalSuccessModifier();\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseCriticalFailureModifier();\n\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseSortingModifier();\n\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseMaxModifier();\n\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseMinModifier();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseExplodeModifier() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 33) {\n      s1 = peg$c7;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e8);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s2 = peg$c7;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e8);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 112) {\n        s3 = peg$c8;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e9);\n        }\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      s4 = peg$parseComparePoint();\n\n      if (s4 === peg$FAILED) {\n        s4 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f5(s2, s3, s4);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseTargetModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parseComparePoint();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseFailComparePoint();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f6(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDropModifier() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 100) {\n      s1 = peg$c3;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e3);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e10);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = peg$parseIntegerNumber();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f7(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKeepModifier() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 107) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e11);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e10);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = peg$parseIntegerNumber();\n\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f8(s2, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseMaxModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 3) === peg$c10) {\n      s1 = peg$c10;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e12);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseFloatNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f9(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseMinModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 3) === peg$c11) {\n      s1 = peg$c11;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e13);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseFloatNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f10(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseReRollModifier() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 114) {\n      s1 = peg$c12;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e14);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 111) {\n        s2 = peg$c13;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e15);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      s3 = peg$parseComparePoint();\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f11(s2, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCriticalSuccessModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c14) {\n      s1 = peg$c14;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e16);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseComparePoint();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f12(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCriticalFailureModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e17);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseComparePoint();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f13(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSortingModifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 115) {\n      s1 = peg$c16;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e18);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 97) {\n        s2 = peg$c17;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e19);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 100) {\n          s2 = peg$c3;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f14(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseFailComparePoint() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 102) {\n      s1 = peg$c18;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e20);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseComparePoint();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f15(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseComparePoint() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parseCompareOperator();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseFloatNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f16(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCompareOperator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c19) {\n      s0 = peg$c19;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e21);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c20) {\n        s0 = peg$c20;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e22);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c21) {\n          s0 = peg$c21;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e23);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s0 = peg$c22;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e24);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c23) {\n              s0 = peg$c23;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e25);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 62) {\n                s0 = peg$c24;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e26);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 60) {\n                  s0 = peg$c25;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e27);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIntegerOrExpression() {\n    var s0, s1, s3, s4, s5, s6, s7, s8, s9, s10;\n    s0 = peg$parseIntegerNumber();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c26;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e28);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$parse_();\n        s3 = peg$currPos;\n        s4 = peg$parseFloatNumber();\n\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$currPos;\n          s7 = peg$parse_();\n          s8 = peg$parseOperator();\n\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parse_();\n            s10 = peg$parseFloatNumber();\n\n            if (s10 !== peg$FAILED) {\n              s7 = [s7, s8, s9, s10];\n              s6 = s7;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = peg$parse_();\n              s8 = peg$parseOperator();\n\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_();\n                s10 = peg$parseFloatNumber();\n\n                if (s10 !== peg$FAILED) {\n                  s7 = [s7, s8, s9, s10];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c27;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e29);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseExpression() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parseFactor();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse_();\n      s5 = peg$parseOperator();\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$parse_();\n        s7 = peg$parseFactor();\n\n        if (s7 !== peg$FAILED) {\n          s4 = [s4, s5, s6, s7];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        s5 = peg$parseOperator();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          s7 = peg$parseFactor();\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f18(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseFactor() {\n    var s0, s1, s3, s5;\n    s0 = peg$parseMathFunction();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseDice();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseFloatNumber();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c26;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e28);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$parse_();\n            s3 = peg$parseExpression();\n\n            if (s3 !== peg$FAILED) {\n              peg$parse_();\n\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c27;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e29);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f19(s1, s3, s5);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseRollGroup();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseMathFunction() {\n    var s0, s1, s2, s4, s6, s8, s10;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 3) === peg$c28) {\n      s1 = peg$c28;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e30);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c29) {\n        s1 = peg$c29;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e31);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c30) {\n          s1 = peg$c30;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e32);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c31) {\n            s1 = peg$c31;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e33);\n            }\n          }\n\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 5) === peg$c32) {\n              s1 = peg$c32;\n              peg$currPos += 5;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e34);\n              }\n            }\n\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c33) {\n                s1 = peg$c33;\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e35);\n                }\n              }\n\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5) === peg$c34) {\n                  s1 = peg$c34;\n                  peg$currPos += 5;\n                } else {\n                  s1 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e36);\n                  }\n                }\n\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c35) {\n                    s1 = peg$c35;\n                    peg$currPos += 4;\n                  } else {\n                    s1 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e37);\n                    }\n                  }\n\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 3) === peg$c36) {\n                      s1 = peg$c36;\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e38);\n                      }\n                    }\n\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4) === peg$c37) {\n                        s1 = peg$c37;\n                        peg$currPos += 4;\n                      } else {\n                        s1 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$e39);\n                        }\n                      }\n\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c38) {\n                          s1 = peg$c38;\n                          peg$currPos += 3;\n                        } else {\n                          s1 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$e40);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c26;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e28);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$parse_();\n        s4 = peg$parseExpression();\n\n        if (s4 !== peg$FAILED) {\n          peg$parse_();\n\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s6 = peg$c27;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e29);\n            }\n          }\n\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f20(s1, s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 3) === peg$c39) {\n        s1 = peg$c39;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e41);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c10) {\n          s1 = peg$c10;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e12);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c11) {\n            s1 = peg$c11;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e13);\n            }\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c26;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e28);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$parse_();\n          s4 = peg$parseExpression();\n\n          if (s4 !== peg$FAILED) {\n            peg$parse_();\n\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s6 = peg$c1;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e1);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              peg$parse_();\n              s8 = peg$parseExpression();\n\n              if (s8 !== peg$FAILED) {\n                peg$parse_();\n\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s10 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e29);\n                  }\n                }\n\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s0 = peg$f21(s1, s4, s8);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFloatNumber() {\n    var s0, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      peg$currPos++;\n    } else {\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e42);\n      }\n    }\n\n    s2 = peg$parseNumber();\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$currPos;\n\n      if (peg$r2.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e43);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseNumber();\n\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f22();\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIntegerNumber() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e44);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n\n      if (peg$r4.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e45);\n        }\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e45);\n          }\n        }\n      }\n\n      peg$savedPos = s0;\n      s0 = peg$f23();\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$r4.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e45);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e45);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f23();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseOperator() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c41) {\n      s1 = peg$c41;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e46);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f24();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s0 = peg$c42;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e47);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 94) {\n          s0 = peg$c43;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e48);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 37) {\n            s0 = peg$c44;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e49);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s0 = peg$c45;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e50);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 43) {\n                s0 = peg$c46;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e51);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 45) {\n                  s0 = peg$c40;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e42);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = [];\n\n    if (peg$r5.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$e53);\n      }\n    }\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n\n      if (peg$r5.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e53);\n        }\n      }\n    }\n\n    peg$silentFails--;\n    s1 = peg$FAILED;\n\n    if (peg$silentFails === 0) {\n      peg$fail(peg$e52);\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n/**\n * The `Parser` takes a notation string and parses it into objects.\n *\n * It is used internally by the DiceRoll object when rolling notation, but can be used by itself if\n * necessary.\n *\n * @see {@link https://dice-roller.github.io/documentation/guide/notation/}\n * @see {@link https://en.m.wikipedia.org/wiki/Dice_notation}\n */\n\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser() {\n    _classCallCheck(this, Parser);\n  }\n\n  _createClass(Parser, null, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parses the given dice notation and returns a list of dice and modifiers found\n     *\n     * @param {string} notation The notation to parse\n     *\n     * @returns {Array}\n     *\n     * @throws {RequiredArgumentError} Notation is required\n     * @throws {SyntaxError} The notation syntax is invalid\n     * @throws {TypeError} Notation must be a string\n     */\n    function parse(notation) {\n      if (!notation) {\n        throw new RequiredArgumentError('notation');\n      }\n\n      if (typeof notation !== 'string') {\n        throw new TypeError('Notation must be a string');\n      } // parse the notation\n\n\n      return peg$parse(notation);\n    }\n  }]);\n\n  return Parser;\n}();\n/**\n * Allowed formats for exporting dice data\n *\n * @readonly\n *\n * @type {Readonly<{BASE_64: number, JSON: number, OBJECT: number}>}\n *\n * @property {number} BASE_64\n * @property {number} JSON\n * @property {number} OBJECT\n */\n\n\nvar exportFormats = Object.freeze({\n  BASE_64: 1,\n  JSON: 0,\n  OBJECT: 2\n});\n/**\n * The notation\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar notationSymbol = Symbol('notation');\n/**\n * The maximum possible roll total\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar maxTotalSymbol = Symbol('maxTotal');\n/**\n * The minimum possible roll total\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar minTotalSymbol = Symbol('minTotal');\n/**\n * List of expressions to roll\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar expressionsSymbol = Symbol('expressions');\n/**\n * Method for rolling dice\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar rollMethodSymbol = Symbol('roll-method');\n/**\n * List of rolls\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar rollsSymbol = Symbol('rolls');\n/**\n * Set the rolls\n *\n * @private\n *\n * @type {symbol}\n */\n\nvar setRollsSymbol = Symbol('set-rolls');\n/**\n * The roll total\n *\n * @type {symbol}\n *\n * @private\n */\n\nvar totalSymbol = Symbol('total');\n/**\n * Calculate the total of all the results, fixed to a max of 2 digits after the decimal point.\n *\n * @private\n *\n * @param {ResultGroup} results\n *\n * @returns {Number} the results total\n */\n\nvar calculateTotal = function calculateTotal(results) {\n  return toFixed(results.calculationValue, 2);\n};\n/**\n * A `DiceRoll` handles rolling of a single dice notation and storing it's result.\n *\n * @see {@link DiceRoller} if you need to keep a history of rolls\n */\n\n\nvar DiceRoll = /*#__PURE__*/function () {\n  /* eslint-disable max-len */\n\n  /**\n   * Create a DiceRoll, parse the notation and roll the dice.\n   *\n   * If `notation` is an object, it must contain a `notation` property that defines the notation.\n   * It can also have an optional array of `RollResults`, in the `rolls` property.\n   *\n   * @example <caption>String notation</caption>\n   * const roll = new DiceRoll('4d6');\n   *\n   * @example <caption>Object</caption>\n   * const roll = new DiceRoll({\n   *   notation: '4d6',\n   *   rolls: ..., // RollResults object or array of roll results\n   * });\n   *\n   * @param {string|{notation: string, rolls: ResultGroup|Array.<ResultGroup|RollResults|string|number>}} notation The notation to roll\n   * @param {string} notation.notation If `notation is an object; the notation to roll\n   * @param {ResultGroup|Array.<ResultGroup|RollResults|string|number>} [notation.rolls] If\n   * `notation` is an object; the rolls to import\n   *\n   * @throws {NotationError} notation is invalid\n   * @throws {RequiredArgumentError} notation is required\n   * @throws {TypeError} Rolls must be a valid result object, or an array\n   */\n  function DiceRoll(notation) {\n    _classCallCheck(this, DiceRoll);\n\n    if (!notation) {\n      throw new RequiredArgumentError('notation');\n    } // initialise the parsed dice array\n\n\n    this[expressionsSymbol] = [];\n\n    if (notation instanceof Object && !Array.isArray(notation)) {\n      // validate object\n      // @todo see if we can assert that the notation is valid\n      if (!notation.notation) {\n        // object doesn't contain a notation property\n        throw new RequiredArgumentError('notation');\n      } else if (typeof notation.notation !== 'string') {\n        throw new NotationError(notation.notation);\n      } else if (notation.rolls) {\n        // we have rolls - store them\n        this[setRollsSymbol](notation.rolls);\n      } // store the notation\n\n\n      this[notationSymbol] = notation.notation; // parse the notation\n\n      this[expressionsSymbol] = Parser.parse(this.notation);\n\n      if (!this.hasRolls()) {\n        // no rolls - roll the dice\n        this.roll();\n      }\n    } else if (typeof notation === 'string') {\n      // @todo see if we can assert that the notation is valid\n      // store the notation\n      this[notationSymbol] = notation; // parse the notation\n\n      this[expressionsSymbol] = Parser.parse(this.notation); // roll the dice\n\n      this.roll();\n    } else {\n      throw new NotationError(notation);\n    }\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * The average possible total for the notation.\n   *\n   * @since 4.3.0\n   *\n   * @returns {number}\n   */\n\n\n  _createClass(DiceRoll, [{\n    key: \"averageTotal\",\n    get: function get() {\n      return (this.maxTotal + this.minTotal) / 2;\n    }\n    /**\n     * The maximum possible total for the notation.\n     *\n     * @since 4.3.0\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"maxTotal\",\n    get: function get() {\n      if (!this.hasExpressions()) {\n        return 0;\n      } // only calculate the total if it has not already been done\n\n\n      if (!this[maxTotalSymbol]) {\n        // roll the dice, forcing values to their maximum\n        var rolls = this[rollMethodSymbol](engines.max); // calculate the total\n\n        this[maxTotalSymbol] = calculateTotal(rolls);\n      } // return the total\n\n\n      return this[maxTotalSymbol];\n    }\n    /**\n     * The minimum possible total for the notation.\n     *\n     * @since 4.3.0\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"minTotal\",\n    get: function get() {\n      if (!this.hasExpressions()) {\n        return 0;\n      } // only calculate the total if it has not already been done\n\n\n      if (!this[minTotalSymbol]) {\n        // roll the dice, forcing values to their minimum\n        var rolls = this[rollMethodSymbol](engines.min); // calculate the total\n\n        this[minTotalSymbol] = calculateTotal(rolls);\n      } // return the total\n\n\n      return this[minTotalSymbol];\n    }\n    /**\n     * The dice notation.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"notation\",\n    get: function get() {\n      return this[notationSymbol];\n    }\n    /**\n     * String representation of the rolls\n     *\n     * @example\n     * 2d20+1d6: [20,2]+[2] = 24\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"output\",\n    get: function get() {\n      var output = \"\".concat(this.notation, \": \");\n\n      if (this.hasRolls()) {\n        output += \"\".concat(this[rollsSymbol], \" = \").concat(this.total);\n      } else {\n        output += 'No dice rolled';\n      }\n\n      return output;\n    }\n    /**\n     * The dice rolled for the notation\n     *\n     * @returns {Array.<ResultGroup|RollResults|string|number>}\n     */\n\n  }, {\n    key: \"rolls\",\n    get: function get() {\n      return this[rollsSymbol] ? this[rollsSymbol].results : [];\n    }\n    /**\n     * The roll total\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"total\",\n    get: function get() {\n      // only calculate the total if it has not already been done\n      if (!this[totalSymbol] && this.hasRolls()) {\n        this[totalSymbol] = calculateTotal(this[rollsSymbol]);\n      } // return the total\n\n\n      return this[totalSymbol] || 0;\n    }\n    /**\n     * Export the object in the given format.\n     * If no format is specified, JSON is returned.\n     *\n     * @see {@link DiceRoll#toJSON}\n     *\n     * @param {exportFormats} [format=exportFormats.JSON] The format to export the data as\n     *\n     * @returns {string|null} The exported data, in the specified format\n     *\n     * @throws {TypeError} Invalid export format\n     */\n\n  }, {\n    key: \"export\",\n    value: function _export() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exportFormats.JSON;\n\n      switch (format) {\n        case exportFormats.BASE_64:\n          // JSON encode then base64, else it exports the string representation of the roll output\n          return btoa(this.export(exportFormats.JSON));\n\n        case exportFormats.JSON:\n          return JSON.stringify(this);\n\n        case exportFormats.OBJECT:\n          return JSON.parse(this.export(exportFormats.JSON));\n\n        default:\n          throw new TypeError(\"Invalid export format \\\"\".concat(format, \"\\\"\"));\n      }\n    }\n    /**\n     * Check whether the DiceRoll has expressions or not.\n     *\n     * @returns {boolean} `true` if the object has expressions, `false` otherwise\n     */\n\n  }, {\n    key: \"hasExpressions\",\n    value: function hasExpressions() {\n      return this[expressionsSymbol] && this[expressionsSymbol].length > 0;\n    }\n    /**\n     * Check whether the object has rolled dice or not\n     *\n     * @returns {boolean} `true` if the object has rolls, `false` otherwise\n     */\n\n  }, {\n    key: \"hasRolls\",\n    value: function hasRolls() {\n      return this.hasExpressions() && this.rolls.length > 0;\n    }\n    /**\n     * Roll the dice for the stored notation.\n     *\n     * This is called in the constructor, so you'll only need this if you want to re-roll the\n     * notation. However, it's usually better to create a new `DiceRoll` instance instead.\n     *\n     * @returns {RollResults[]} The results of the rolls\n     */\n\n  }, {\n    key: \"roll\",\n    value: function roll() {\n      // reset the cached total\n      this[totalSymbol] = 0; // save the rolls to the log\n\n      this[rollsSymbol] = this[rollMethodSymbol](); // return the rolls;\n\n      return this.rolls;\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{\n     *  output: string,\n     *  total: number,\n     *  minTotal: number,\n     *  maxTotal: number,\n     *  notation: string,\n     *  rolls: RollResults[],\n     *  type: string\n     * }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var averageTotal = this.averageTotal,\n          maxTotal = this.maxTotal,\n          minTotal = this.minTotal,\n          notation = this.notation,\n          output = this.output,\n          rolls = this.rolls,\n          total = this.total;\n      return {\n        averageTotal: averageTotal,\n        maxTotal: maxTotal,\n        minTotal: minTotal,\n        notation: notation,\n        output: output,\n        rolls: rolls,\n        total: total,\n        type: 'dice-roll'\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     *\n     * @see {@link DiceRoll#output}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.output;\n    }\n    /**\n     * Create a new `DiceRoll` instance with the given data.\n     *\n     * `data` can be an object of data, a JSON / base64 encoded string of such data.\n     *\n     * The object must contain a `notation` property that defines the notation and, optionally, an\n     * array of RollResults, in the `rolls` property.\n     *\n     * @example <caption>Object</caption>\n     * DiceRoll.import({\n     *   notation: '4d6',\n     *   rolls: ..., // ResultGroup object or array of roll results\n     * });\n     *\n     * @example <caption>JSON</caption>\n     * DiceRoll.import('{\"notation\":\"4d6\",\"rolls\":[...]}');\n     *\n     * @example <caption>Base64</caption>\n     * DiceRoll.import('eyJub3RhdGlvbiI6IjRkNiIsInJvbGxzIjpbXX0=');\n     *\n     * @param {{notation: string, rolls: RollResults[]}|string} data The data to import\n     * @param {string} data.notation If `notation` is an object; the notation to import\n     * @param {RollResults[]} [data.rolls] If `notation` is an object; the rolls to import\n     *\n     * @returns {DiceRoll} The new `DiceRoll` instance\n     *\n     * @throws {DataFormatError} data format is invalid\n     */\n\n  }, {\n    key: rollMethodSymbol,\n    value:\n    /**\n     * Roll the dice and return the result.\n     *\n     * If the engine is passed, it will be used for the number generation for **this roll only**.\n     * The engine will be reset after use.\n     *\n     * @private\n     *\n     * @param {{next(): number}} [engine] The RNG engine to use for die rolls\n     *\n     * @returns {ResultGroup} The result of the rolls\n     *\n     * @throws {TypeError} engine must have function `next()`\n     */\n    function value(engine) {\n      var oEngine;\n\n      if (engine) {\n        // use the selected engine\n        oEngine = generator.engine;\n        generator.engine = engine;\n      } // roll the dice\n\n\n      var results = new ResultGroup(this[expressionsSymbol].map(function (expression) {\n        if (expression instanceof StandardDice || expression instanceof RollGroup) {\n          // roll the object and return the value\n          return expression.roll();\n        }\n\n        return expression;\n      }) // filter out empty values (e.g. whitespace)\n      .filter(function (value) {\n        return !!value || value === 0;\n      }));\n\n      if (engine) {\n        // reset the engine\n        generator.engine = oEngine;\n      }\n\n      return results;\n    }\n    /* eslint-disable max-len */\n\n    /**\n     * Set the rolls.\n     *\n     * @private\n     *\n     * @param {ResultGroup|Array.<ResultGroup|RollResults|string|number|{}|Array.<RollResult|number>>} rolls\n     *\n     * @throws {TypeError} Rolls must be a valid result object, or an array\n     */\n\n  }, {\n    key: setRollsSymbol,\n    value: function value(rolls) {\n      if (rolls instanceof ResultGroup) {\n        this[rollsSymbol] = rolls;\n      } else if (rolls instanceof RollResults) {\n        this[rollsSymbol] = new ResultGroup([rolls]);\n      } else if (Array.isArray(rolls)) {\n        this[rollsSymbol] = new ResultGroup(rolls.map(function (roll) {\n          if (roll instanceof ResultGroup || roll instanceof RollResults) {\n            // already a RollResults object\n            return roll;\n          } // @todo should this be a ResultGroup, or a RollResults?\n\n\n          if (Array.isArray(roll)) {\n            // array of values\n            return new RollResults(roll);\n          }\n\n          if (typeof roll === 'object') {\n            // a result group\n            if (Array.isArray(roll.results)) {\n              return new ResultGroup(roll.results, roll.modifiers || [], roll.isRollGroup || false, typeof roll.useInTotal === 'boolean' ? roll.useInTotal : true);\n            } // roll results\n\n\n            if (Array.isArray(roll.rolls)) {\n              return new RollResults(roll.rolls);\n            }\n          }\n\n          return roll;\n        }));\n      } else {\n        throw new TypeError('Rolls must be a valid result object, or an array');\n      }\n    }\n    /* eslint-enable max-len */\n\n  }], [{\n    key: \"import\",\n    value: function _import(data) {\n      if (!data) {\n        throw new RequiredArgumentError('data');\n      } else if (isJson(data)) {\n        // data is JSON format - parse and import\n        return DiceRoll.import(JSON.parse(data));\n      } else if (isBase64(data)) {\n        // data is base64 encoded - decode and import\n        return DiceRoll.import(atob(data));\n      } else if (typeof data === 'object') {\n        // if data is a `DiceRoll` return it, otherwise build it\n        return new DiceRoll(data);\n      } else {\n        throw new DataFormatError(data);\n      }\n    }\n  }]);\n\n  return DiceRoll;\n}();\n/**\n * history of log rolls\n *\n * @type {symbol}\n *\n * @private\n */\n\n\nvar logSymbol = Symbol('log');\n/**\n * A `DiceRoller` handles dice rolling functionality, keeps a history of rolls and can output logs\n * etc.\n *\n * @see {@link DiceRoll} if you don't need to keep a log history of rolls\n */\n\nvar DiceRoller = /*#__PURE__*/function () {\n  /**\n   * Create a DiceRoller.\n   *\n   * The optional `data` property should be either an array of `DiceRoll` objects, or an object with\n   * a `log` property that contains the `DiceRoll` objects.\n   *\n   * @param {{log: DiceRoll[]}|DiceRoll[]} [data] The data to import\n   * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s\n   *\n   * @throws {TypeError} if data is an object, it must have a `log[]` property\n   */\n  function DiceRoller(data) {\n    _classCallCheck(this, DiceRoller);\n\n    this[logSymbol] = [];\n\n    if (data) {\n      this.import(data);\n    }\n  }\n  /**\n   * The list of roll logs.\n   *\n   * @returns {DiceRoll[]}\n   */\n\n\n  _createClass(DiceRoller, [{\n    key: \"log\",\n    get: function get() {\n      return this[logSymbol] || [];\n    }\n    /**\n     * String representation of the rolls in the log\n     *\n     * @example\n     * 2d20+1d6: [20,2]+[2] = 24; 1d8: [6] = 6\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"output\",\n    get: function get() {\n      return this.log.join('; ');\n    }\n    /**\n     * The sum of all the rolls in the log\n     *\n     * @see {@link DiceRoller#log}\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"total\",\n    get: function get() {\n      return this.log.reduce(function (prev, current) {\n        return prev + current.total;\n      }, 0);\n    }\n    /**\n     * Clear the roll history log.\n     *\n     * @see {@link DiceRoller#log}\n     */\n\n  }, {\n    key: \"clearLog\",\n    value: function clearLog() {\n      this[logSymbol].length = 0;\n    }\n    /**\n     * Export the object in the given format.\n     * If no format is specified, JSON is returned.\n     *\n     * @see {@link DiceRoller#toJSON}\n     *\n     * @param {exportFormats} [format=exportFormats#JSON] The format to export the data as\n     *\n     * @returns {string|null} The exported data, in the specified format\n     *\n     * @throws {TypeError} Invalid export format\n     */\n\n  }, {\n    key: \"export\",\n    value: function _export() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exportFormats.JSON;\n\n      switch (format) {\n        case exportFormats.BASE_64:\n          // JSON encode, then base64\n          return btoa(this.export(exportFormats.JSON));\n\n        case exportFormats.JSON:\n          return JSON.stringify(this);\n\n        case exportFormats.OBJECT:\n          return JSON.parse(this.export(exportFormats.JSON));\n\n        default:\n          throw new TypeError(\"Invalid export format \\\"\".concat(format, \"\\\"\"));\n      }\n    }\n    /**\n     * Add the data to the existing [roll log]{@link DiceRoller#log}.\n     *\n     * `data` can be an array of `DiceRoll` objects, an object with a `log` property that contains\n     * `DiceRoll` objects, or a JSON / base64 encoded representation of either.\n     *\n     * @see {@link DiceRoller#log}\n     *\n     * @param {string|{log: DiceRoll[]}|DiceRoll[]} data The data to import\n     * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s\n     *\n     * @returns {DiceRoll[]} The roll log\n     *\n     * @throws {DataFormatError} data format invalid\n     * @throws {RequiredArgumentError} data is required\n     * @throws {TypeError} log must be an array\n     */\n\n  }, {\n    key: \"import\",\n    value: function _import(data) {\n      var _this32 = this;\n\n      if (!data) {\n        throw new RequiredArgumentError('data');\n      } else if (isJson(data)) {\n        // data is JSON - parse and import\n        return this.import(JSON.parse(data));\n      } else if (isBase64(data)) {\n        // data is base64 encoded - decode an import\n        return this.import(atob(data));\n      } else if (typeof data === 'object') {\n        var log = data.log || null;\n\n        if (!data.log && Array.isArray(data) && data.length) {\n          // if `log` is not defined, but data is an array, use it as the list of logs\n          log = data;\n        }\n\n        if (log && Array.isArray(log)) {\n          // loop through each log entry and import it\n          log.forEach(function (roll) {\n            _this32[logSymbol].push(DiceRoll.import(roll));\n          });\n        } else if (log) {\n          throw new TypeError('log must be an array');\n        }\n\n        return this.log;\n      } else {\n        throw new DataFormatError(data);\n      }\n    }\n    /**\n     * Roll the given dice notation(s) and return the corresponding `DiceRoll` objects.\n     *\n     * You can roll a single notation, or multiple at once.\n     *\n     * @example <caption>Single notation</caption>\n     * diceRoller.roll('2d6');\n     *\n     * @example <caption>Multiple notations</caption>\n     * roll('2d6', '4d10', 'd8+4d6');\n     *\n     * @param {...string} notations The notations to roll\n     *\n     * @returns {DiceRoll|DiceRoll[]} If a single notation is passed, a single `DiceRoll` is returned,\n     * otherwise an array of `DiceRoll` objects is returned\n     *\n     * @throws {NotationError} notation is invalid\n     * @throws {RequiredArgumentError} notation is required\n     */\n\n  }, {\n    key: \"roll\",\n    value: function roll() {\n      var _this33 = this;\n\n      for (var _len2 = arguments.length, notations = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        notations[_key2] = arguments[_key2];\n      }\n\n      var filteredNotations = notations.filter(Boolean);\n\n      if (filteredNotations.length === 0) {\n        throw new RequiredArgumentError('notations');\n      }\n\n      var rolls = filteredNotations.map(function (notation) {\n        var diceRoll = new DiceRoll(notation); // add the roll log to our global log\n\n        _this33[logSymbol].push(diceRoll); // return the current DiceRoll\n\n\n        return diceRoll;\n      });\n      return rolls.length > 1 ? rolls : rolls[0];\n    }\n    /**\n     * Return an object for JSON serialising.\n     *\n     * This is called automatically when JSON encoding the object.\n     *\n     * @returns {{output: string, total: number, log: DiceRoll[], type: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var log = this.log,\n          output = this.output,\n          total = this.total;\n      return {\n        log: log,\n        output: output,\n        total: total,\n        type: 'dice-roller'\n      };\n    }\n    /**\n     * Return the String representation of the object.\n     *\n     * This is called automatically when casting the object to a string.\n     *\n     * @returns {string}\n     *\n     * @see {@link DiceRoller#output}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.output;\n    }\n    /**\n     * Create a new `DiceRoller` instance with the given data.\n     *\n     * `data` can be an array of `DiceRoll` objects, an object with a `log` property that contains the\n     * `DiceRoll` objects, or a JSON / base64 encoded representation of either.\n     *\n     * @see instance method {@link DiceRoller#import}\n     *\n     * @param {string|{log: DiceRoll[]}|DiceRoll[]} data The data to import\n     * @param {DiceRoll[]} [data.log] If `data` is an object, it must contain an array of `DiceRoll`s\n     *\n     * @returns {DiceRoller} The new `DiceRoller` instance\n     *\n     * @throws {DataFormatError} data format invalid\n     * @throws {RequiredArgumentError} data is required\n     * @throws {TypeError} log must be an array\n     */\n\n  }], [{\n    key: \"import\",\n    value: function _import(data) {\n      // create a new DiceRoller object\n      var diceRoller = new DiceRoller(); // import the data\n\n      diceRoller.import(data); // return the DiceRoller\n\n      return diceRoller;\n    }\n  }]);\n\n  return DiceRoller;\n}();\n\nexport { ComparePoint, index$2 as Dice, DiceRoll, DiceRoller, index$4 as Exceptions, index$1 as Modifiers, NumberGenerator$1 as NumberGenerator, Parser, index as Results, RollGroup, exportFormats };"],"names":["_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","_isNativeReflectConstruct","result","Super","NewTarget","this","constructor","arguments","apply","CompareOperatorError","_TypeError","_super","operator","_this","concat","TypeError","captureStackTrace","name","DataFormatError","_Error","_super2","data","_this2","Error","DieActionValueError","_Error2","_super3","die","_this3","action","length","undefined","NotationError","_Error3","_super4","notation","_this4","RequiredArgumentError","_Error4","_super5","_this5","argumentName","evaluate","equation","isNumeric","val","Number","isNaN","isFinite","isSafeNumber","castVal","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","_int","engine","next","add","distribution","addend","_int2","high","low","_int53Full","_uint","_uint2","_uint53Full","isPowerOfTwoMinusOne","value","downscaleToRange","range","masking","extendedRange","maximum","Math","floor","downscaleToLoopCheckedRange","upscaleWithinU53","highRange","ret","upscaleToLoopCheckedRange","upscaleWithinI53AndLoopCheck","min","max","_integer","RangeError","isLeastBitTrue","lessThan","_bool","numerator","denominator","percentage","scaled","round","probability","_die","sideCount","DEFAULT_STRING_POOL","_string","pool","poolLength","i","j","charAt","LOWER_HEX_POOL","lowerHex","upperHex","toUpperCase","convertSliceArgument","toInteger","num","ceil","multiply","multiplier","_realZeroToOneExclusive","_realZeroToOneInclusive","_real","inclusive","sliceArray","Array","slice","_shuffle","array","downTo","tmp","stringRepeat","repeat","pattern","count","_","zeroPad","text","zeroCount","nativeMath","random","Random","key","source","begin","end","start","finish","_pick","population","sampleSize","clone","tailLength","_sample","dieCount","push","_dice","a","b","c","d","toString","uppercase","_hex","Date","_date","I32Array","buffer","ArrayBuffer","view","Int32Array","index$3","browserCrypto","crypto","getRandomValues","imul","UINT16_MAX","al","bl","ARRAY_SIZE","ARRAY_MAX","A","MersenneTwister19937","index","uses","refreshData","temper","initial","previous","seed","sourceLength","k","_seedWithArray","seedWithArray","getTime","createEntropy","M","data$1","index$1$1","nodeCrypto","Int8Array","engineSymbol","Symbol","randomSymbol","engines","NumberGenerator","get","set","integer","real","generator","operatorSymbol","valueSymbol$1","ComparePoint","isValidOperator","aNum","bNum","compareNumbers","type","test","Modifier","order","results","_context","comparePointSymbol","ComparisonModifier","_Modifier","_super6","comparePoint","_this6","isMatch","Object","assign","compoundSymbol","penetrateSymbol","ExplodeModifier","_ComparisonModifier","_super7","_this7","compound","penetrate","_this8","parsedResults","rolls","map","roll","numbers","subRolls","compareValue","maxIterations","isComparePoint","prevRoll","rollResult","rollOnce","modifiers","isArray","reduce","prev","current","parseFloat","flat","flags","explode","drop","getModifierFlags","_len","_key","acc","modifier","calculationValueSymbol$1","modifiersSymbol$3","initialValueSymbol","useInTotalSymbol$1","valueSymbol","RollResult","useInTotal","Infinity","initialVal","initialValue","calculationValue","isValNumeric","Set","every","item","modifierFlags","rollsSymbol$1","RollResults","_this9","forEach","addRoll","v","join","onceSymbol","ReRollModifier","_ComparisonModifier2","_super8","_this10","once","_this11","modifiersSymbol$2","qtySymbol$1","sidesSymbol","minSymbol$1","maxSymbol$1","StandardDice","sides","qty","parseInt","Map","sort","_this12","entries","size","some","entry","values","_this13","run","average","FudgeDice","_StandardDice","_super9","nonBlanks","numNonBlanks","total","PercentileDice","_StandardDice2","_super10","_this14","sidesAsNumber","CriticalFailureModifier","_ComparisonModifier3","_super11","_this15","_this16","CriticalSuccessModifier","_ComparisonModifier4","_super12","_this17","_this18","calculationValueSymbol","isRollGroupSymbol","modifiersSymbol$1","resultsSymbol","useInTotalSymbol","ResultGroup","isRollGroup","_this19","addResult","output","endSymbol","qtySymbol","KeepModifier","_Modifier2","_super13","_this20","_results","_rollIndexes$sort$map","modifiedRolls","rollIndexes","subResult","subIndex","filter","rollIndex","rangeToDrop","DropModifier","_KeepModifier","_super14","_this21","maxSymbol","MaxModifier","_Modifier3","_super15","_this22","_this23","parsedRoll","minSymbol","MinModifier","_Modifier4","_super16","_this24","_this25","directionSymbol","SortingModifier","_Modifier5","_super17","_this26","direction","resultsKey","_this27","subRoll","failureCPSymbol","TargetModifier","_ComparisonModifier5","_super18","successCP","_this28","failureCP","failureComparePoint","isSuccess","isFailure","_this29","getStateValue","successComparePoint","isBase64","btoa","atob","isJson","parsed","JSON","parse","modifiersSymbol","expressionsSymbol$1","RollGroup","expressions","_this30","expression","_this31","rollResults","peg$SyntaxError","message","expected","found","location","self","setPrototypeOf","peg$padEnd","str","targetLength","padString","peg$parse","input","options","peg$result","peg$FAILED","peg$source","grammarSource","peg$startRuleFunctions","Main","peg$parseMain","peg$startRuleFunction","peg$c1","peg$c3","peg$c4","peg$c5","peg$c7","peg$c10","peg$c11","peg$c14","peg$c15","peg$c19","peg$c20","peg$c21","peg$c23","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$r0","peg$r1","peg$r2","peg$r3","peg$r4","peg$r5","peg$e0","peg$literalExpectation","peg$e1","peg$e2","peg$e3","peg$e4","peg$e5","peg$e6","peg$e7","peg$classExpectation","peg$e8","peg$e9","peg$e10","peg$e11","peg$e12","peg$e13","peg$e14","peg$e15","peg$e16","peg$e17","peg$e18","peg$e19","peg$e20","peg$e21","peg$e22","peg$e23","peg$e24","peg$e25","peg$e26","peg$e27","peg$e28","peg$e29","peg$e30","peg$e31","peg$e32","peg$e33","peg$e34","peg$e35","peg$e36","peg$e37","peg$e38","peg$e39","peg$e40","peg$e41","peg$e42","peg$e43","peg$e44","peg$e45","peg$e46","peg$e47","peg$e48","peg$e49","peg$e50","peg$e51","peg$e52","description","peg$e53","peg$f23","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","substring","ignoreCase","parts","inverted","peg$computePosDetails","pos","p","details","charCodeAt","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$parseExpression","peg$parseRollGroup","s0","s1","s3","s4","s5","s6","s7","s8","s9","exprs","peg$parse_","peg$parseModifier","peg$parseDice","s2","peg$parseIntegerOrExpression","peg$parseStandardDie","substr","peg$parsePercentileDie","peg$parseFudgeDie","peg$parseComparePoint","peg$parseExplodeModifier","peg$parseFailComparePoint","peg$parseTargetModifier","peg$parseIntegerNumber","peg$parseDropModifier","peg$parseKeepModifier","peg$parseReRollModifier","peg$parseCriticalSuccessModifier","peg$parseCriticalFailureModifier","peg$parseSortingModifier","peg$parseFloatNumber","peg$parseMaxModifier","peg$parseMinModifier","peg$parseCompareOperator","s10","peg$parseOperator","head","tail","peg$parseFactor","_ref3","_ref4","expr","r","func","expr1","expr2","peg$f21","peg$parseMathFunction","peg$parseNumber","buildMessage","child","parent","C","peg$subclass","format","sources","src","split","s","loc","filler","last","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","part","classEscape","any","other","hex","ch","replace","describeExpectation","descriptions","describeExpected","describeFound","Parser","exportFormats","freeze","BASE_64","OBJECT","notationSymbol","maxTotalSymbol","minTotalSymbol","expressionsSymbol","rollMethodSymbol","rollsSymbol","setRollsSymbol","totalSymbol","calculateTotal","precision","toFixed","DiceRoll","hasRolls","maxTotal","minTotal","hasExpressions","export","stringify","averageTotal","oEngine","import"],"sourceRoot":""}